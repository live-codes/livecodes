function d(n){p(n,"start");var t={},e=n.languageData||{},u=!1;for(var f in n)if(f!=e&&n.hasOwnProperty(f))for(var a=t[f]=[],i=n[f],r=0;r<i.length;r++){var o=i[r];a.push(new l(o,n)),(o.indent||o.dedent)&&(u=!0)}return{name:e.name,startState:function(){return{state:"start",pending:null,indent:u?[]:null}},copyState:function(g){var s={state:g.state,pending:g.pending,indent:g.indent&&g.indent.slice(0)};return g.stack&&(s.stack=g.stack.slice(0)),s},token:k(t),indent:h(t,e),languageData:e}}function p(n,t){if(!n.hasOwnProperty(t))throw new Error("Undefined state "+t+" in simple mode")}function x(n,t){if(!n)return/(?:)/;var e="";return n instanceof RegExp?(n.ignoreCase&&(e="i"),n=n.source):n=String(n),new RegExp((t===!1?"":"^")+"(?:"+n+")",e)}function c(n){if(!n)return null;if(n.apply)return n;if(typeof n=="string")return n.replace(/\./g," ");for(var t=[],e=0;e<n.length;e++)t.push(n[e]&&n[e].replace(/\./g," "));return t}function l(n,t){(n.next||n.push)&&p(t,n.next||n.push),this.regex=x(n.regex),this.token=c(n.token),this.data=n}function k(n){return function(t,e){if(e.pending){var u=e.pending.shift();return e.pending.length==0&&(e.pending=null),t.pos+=u.text.length,u.token}for(var f=n[e.state],a=0;a<f.length;a++){var i=f[a],r=(!i.data.sol||t.sol())&&t.match(i.regex);if(r){i.data.next?e.state=i.data.next:i.data.push?((e.stack||(e.stack=[])).push(e.state),e.state=i.data.push):i.data.pop&&e.stack&&e.stack.length&&(e.state=e.stack.pop()),i.data.indent&&e.indent.push(t.indentation()+t.indentUnit),i.data.dedent&&e.indent.pop();var o=i.token;if(o&&o.apply&&(o=o(r)),r.length>2&&i.token&&typeof i.token!="string"){e.pending=[];for(var g=2;g<r.length;g++)r[g]&&e.pending.push({text:r[g],token:i.token[g-1]});return t.backUp(r[0].length-(r[1]?r[1].length:0)),o[0]}else return o&&o.join?o[0]:o}}return t.next(),null}}function h(n,t){return function(e,u){if(e.indent==null||t.dontIndentStates&&t.doneIndentState.indexOf(e.state)>-1)return null;var f=e.indent.length-1,a=n[e.state];n:for(;;){for(var i=0;i<a.length;i++){var r=a[i];if(r.data.dedent&&r.data.dedentIfLineStart!==!1){var o=r.regex.exec(u);if(o&&o[0]){f--,(r.next||r.push)&&(a=n[r.next||r.push]),u=u.slice(o[0].length);continue n}}}break}return f<0?0:e.indent[f]}}var m=d({start:[{regex:/b?"/,token:"string",next:"string"},{regex:/b?r"/,token:"string",next:"string_raw"},{regex:/b?r#+"/,token:"string",next:"string_raw_hash"},{regex:/'(?:[^'\\]|\\(?:[nrt0'"]|x[\da-fA-F]{2}|u\{[\da-fA-F]{6}\}))'/,token:"string.special"},{regex:/b'(?:[^']|\\(?:['\\nrt0]|x[\da-fA-F]{2}))'/,token:"string.special"},{regex:/(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,token:"number"},{regex:/(let(?:\s+mut)?|fn|enum|mod|struct|type|union)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,token:["keyword",null,"def"]},{regex:/(?:abstract|alignof|as|async|await|box|break|continue|const|crate|do|dyn|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\b/,token:"keyword"},{regex:/\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\b/,token:"atom"},{regex:/\b(?:true|false|Some|None|Ok|Err)\b/,token:"builtin"},{regex:/\b(fn)(\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,token:["keyword",null,"def"]},{regex:/#!?\[.*\]/,token:"meta"},{regex:/\/\/.*/,token:"comment"},{regex:/\/\*/,token:"comment",next:"comment"},{regex:/[-+\/*=<>!]+/,token:"operator"},{regex:/[a-zA-Z_]\w*!/,token:"macroName"},{regex:/[a-zA-Z_]\w*/,token:"variable"},{regex:/[\{\[\(]/,indent:!0},{regex:/[\}\]\)]/,dedent:!0}],string:[{regex:/"/,token:"string",next:"start"},{regex:/(?:[^\\"]|\\(?:.|$))*/,token:"string"}],string_raw:[{regex:/"/,token:"string",next:"start"},{regex:/[^"]*/,token:"string"}],string_raw_hash:[{regex:/"#+/,token:"string",next:"start"},{regex:/(?:[^"]|"(?!#))*/,token:"string"}],comment:[{regex:/.*?\*\//,token:"comment",next:"start"},{regex:/.*/,token:"comment"}],languageData:{name:"rust",dontIndentStates:["comment"],indentOnInput:/^\s*\}$/,commentTokens:{line:"//",block:{open:"/*",close:"*/"}}}});export{m as rust};
//# sourceMappingURL=codemirror-lang-rust.js.map
