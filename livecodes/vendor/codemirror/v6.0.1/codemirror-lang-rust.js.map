{
  "version": 3,
  "sources": ["../../../../../node_modules/@codemirror/legacy-modes/mode/simple-mode.js", "../../../../../node_modules/@codemirror/legacy-modes/mode/rust.js"],
  "sourcesContent": ["export function simpleMode(states) {\n  ensureState(states, \"start\");\n  var states_ = {}, meta = states.languageData || {}, hasIndentation = false;\n  for (var state in states) if (state != meta && states.hasOwnProperty(state)) {\n    var list = states_[state] = [], orig = states[state];\n    for (var i = 0; i < orig.length; i++) {\n      var data = orig[i];\n      list.push(new Rule(data, states));\n      if (data.indent || data.dedent) hasIndentation = true;\n    }\n  }\n  return {\n    name: meta.name,\n    startState: function() {\n      return {state: \"start\", pending: null, indent: hasIndentation ? [] : null};\n    },\n    copyState: function(state) {\n      var s = {state: state.state, pending: state.pending, indent: state.indent && state.indent.slice(0)};\n      if (state.stack)\n        s.stack = state.stack.slice(0);\n      return s;\n    },\n    token: tokenFunction(states_),\n    indent: indentFunction(states_, meta),\n    languageData: meta\n  }\n};\n\nfunction ensureState(states, name) {\n  if (!states.hasOwnProperty(name))\n    throw new Error(\"Undefined state \" + name + \" in simple mode\");\n}\n\nfunction toRegex(val, caret) {\n  if (!val) return /(?:)/;\n  var flags = \"\";\n  if (val instanceof RegExp) {\n    if (val.ignoreCase) flags = \"i\";\n    val = val.source;\n  } else {\n    val = String(val);\n  }\n  return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n}\n\nfunction asToken(val) {\n  if (!val) return null;\n  if (val.apply) return val\n  if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n  var result = [];\n  for (var i = 0; i < val.length; i++)\n    result.push(val[i] && val[i].replace(/\\./g, \" \"));\n  return result;\n}\n\nfunction Rule(data, states) {\n  if (data.next || data.push) ensureState(states, data.next || data.push);\n  this.regex = toRegex(data.regex);\n  this.token = asToken(data.token);\n  this.data = data;\n}\n\nfunction tokenFunction(states) {\n  return function(stream, state) {\n    if (state.pending) {\n      var pend = state.pending.shift();\n      if (state.pending.length == 0) state.pending = null;\n      stream.pos += pend.text.length;\n      return pend.token;\n    }\n\n    var curState = states[state.state];\n    for (var i = 0; i < curState.length; i++) {\n      var rule = curState[i];\n      var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n      if (matches) {\n        if (rule.data.next) {\n          state.state = rule.data.next;\n        } else if (rule.data.push) {\n          (state.stack || (state.stack = [])).push(state.state);\n          state.state = rule.data.push;\n        } else if (rule.data.pop && state.stack && state.stack.length) {\n          state.state = state.stack.pop();\n        }\n\n        if (rule.data.indent)\n          state.indent.push(stream.indentation() + stream.indentUnit);\n        if (rule.data.dedent)\n          state.indent.pop();\n        var token = rule.token\n        if (token && token.apply) token = token(matches)\n        if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n          state.pending = [];\n          for (var j = 2; j < matches.length; j++)\n            if (matches[j])\n              state.pending.push({text: matches[j], token: rule.token[j - 1]});\n          stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n          return token[0];\n        } else if (token && token.join) {\n          return token[0];\n        } else {\n          return token;\n        }\n      }\n    }\n    stream.next();\n    return null;\n  };\n}\n\nfunction indentFunction(states, meta) {\n  return function(state, textAfter) {\n    if (state.indent == null || meta.dontIndentStates && meta.doneIndentState.indexOf(state.state) > -1)\n      return null\n\n    var pos = state.indent.length - 1, rules = states[state.state];\n    scan: for (;;) {\n      for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n          var m = rule.regex.exec(textAfter);\n          if (m && m[0]) {\n            pos--;\n            if (rule.next || rule.push) rules = states[rule.next || rule.push];\n            textAfter = textAfter.slice(m[0].length);\n            continue scan;\n          }\n        }\n      }\n      break;\n    }\n    return pos < 0 ? 0 : state.indent[pos];\n  };\n}\n", "import {simpleMode} from \"./simple-mode.js\"\n\nexport const rust = simpleMode({\n  start: [\n    // string and byte string\n    {regex: /b?\"/, token: \"string\", next: \"string\"},\n    // raw string and raw byte string\n    {regex: /b?r\"/, token: \"string\", next: \"string_raw\"},\n    {regex: /b?r#+\"/, token: \"string\", next: \"string_raw_hash\"},\n    // character\n    {regex: /'(?:[^'\\\\]|\\\\(?:[nrt0'\"]|x[\\da-fA-F]{2}|u\\{[\\da-fA-F]{6}\\}))'/, token: \"string.special\"},\n    // byte\n    {regex: /b'(?:[^']|\\\\(?:['\\\\nrt0]|x[\\da-fA-F]{2}))'/, token: \"string.special\"},\n\n    {regex: /(?:(?:[0-9][0-9_]*)(?:(?:[Ee][+-]?[0-9_]+)|\\.[0-9_]+(?:[Ee][+-]?[0-9_]+)?)(?:f32|f64)?)|(?:0(?:b[01_]+|(?:o[0-7_]+)|(?:x[0-9a-fA-F_]+))|(?:[0-9][0-9_]*))(?:u8|u16|u32|u64|i8|i16|i32|i64|isize|usize)?/,\n     token: \"number\"},\n    {regex: /(let(?:\\s+mut)?|fn|enum|mod|struct|type|union)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/, token: [\"keyword\", null, \"def\"]},\n    {regex: /(?:abstract|alignof|as|async|await|box|break|continue|const|crate|do|dyn|else|enum|extern|fn|for|final|if|impl|in|loop|macro|match|mod|move|offsetof|override|priv|proc|pub|pure|ref|return|self|sizeof|static|struct|super|trait|type|typeof|union|unsafe|unsized|use|virtual|where|while|yield)\\b/, token: \"keyword\"},\n    {regex: /\\b(?:Self|isize|usize|char|bool|u8|u16|u32|u64|f16|f32|f64|i8|i16|i32|i64|str|Option)\\b/, token: \"atom\"},\n    {regex: /\\b(?:true|false|Some|None|Ok|Err)\\b/, token: \"builtin\"},\n    {regex: /\\b(fn)(\\s+)([a-zA-Z_][a-zA-Z0-9_]*)/,\n     token: [\"keyword\", null ,\"def\"]},\n    {regex: /#!?\\[.*\\]/, token: \"meta\"},\n    {regex: /\\/\\/.*/, token: \"comment\"},\n    {regex: /\\/\\*/, token: \"comment\", next: \"comment\"},\n    {regex: /[-+\\/*=<>!]+/, token: \"operator\"},\n    {regex: /[a-zA-Z_]\\w*!/,token: \"macroName\"},\n    {regex: /[a-zA-Z_]\\w*/, token: \"variable\"},\n    {regex: /[\\{\\[\\(]/, indent: true},\n    {regex: /[\\}\\]\\)]/, dedent: true}\n  ],\n  string: [\n    {regex: /\"/, token: \"string\", next: \"start\"},\n    {regex: /(?:[^\\\\\"]|\\\\(?:.|$))*/, token: \"string\"}\n  ],\n  string_raw: [\n    {regex: /\"/, token: \"string\", next: \"start\"},\n    {regex: /[^\"]*/, token: \"string\"}\n  ],\n  string_raw_hash: [\n    {regex: /\"#+/, token: \"string\", next: \"start\"},\n    {regex: /(?:[^\"]|\"(?!#))*/, token: \"string\"}\n  ],\n  comment: [\n    {regex: /.*?\\*\\//, token: \"comment\", next: \"start\"},\n    {regex: /.*/, token: \"comment\"}\n  ],\n  languageData: {\n    name: \"rust\",\n    dontIndentStates: [\"comment\"],\n    indentOnInput: /^\\s*\\}$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\n  }\n});\n"],
  "mappings": "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",
  "names": ["simpleMode", "states", "ensureState", "states_", "meta", "hasIndentation", "state", "list", "orig", "i", "data", "Rule", "tokenFunction", "indentFunction", "name", "toRegex", "val", "caret", "flags", "asToken", "result", "stream", "pend", "curState", "rule", "matches", "token", "j", "textAfter", "pos", "rules", "scan", "m", "rust", "simpleMode"]
}
