{
  "version": 3,
  "sources": ["../../../../../node_modules/@codemirror/legacy-modes/mode/ruby.js"],
  "sourcesContent": ["function wordObj(words) {\n  var o = {};\n  for (var i = 0, e = words.length; i < e; ++i) o[words[i]] = true;\n  return o;\n}\n\nvar keywordList = [\n  \"alias\", \"and\", \"BEGIN\", \"begin\", \"break\", \"case\", \"class\", \"def\", \"defined?\", \"do\", \"else\",\n  \"elsif\", \"END\", \"end\", \"ensure\", \"false\", \"for\", \"if\", \"in\", \"module\", \"next\", \"not\", \"or\",\n  \"redo\", \"rescue\", \"retry\", \"return\", \"self\", \"super\", \"then\", \"true\", \"undef\", \"unless\",\n  \"until\", \"when\", \"while\", \"yield\", \"nil\", \"raise\", \"throw\", \"catch\", \"fail\", \"loop\", \"callcc\",\n  \"caller\", \"lambda\", \"proc\", \"public\", \"protected\", \"private\", \"require\", \"load\",\n  \"require_relative\", \"extend\", \"autoload\", \"__END__\", \"__FILE__\", \"__LINE__\", \"__dir__\"\n], keywords = wordObj(keywordList);\n\nvar indentWords = wordObj([\"def\", \"class\", \"case\", \"for\", \"while\", \"until\", \"module\",\n                           \"catch\", \"loop\", \"proc\", \"begin\"]);\nvar dedentWords = wordObj([\"end\", \"until\"]);\nvar opening = {\"[\": \"]\", \"{\": \"}\", \"(\": \")\"};\nvar closing = {\"]\": \"[\", \"}\": \"{\", \")\": \"(\"};\n\nvar curPunc;\n\nfunction chain(newtok, stream, state) {\n  state.tokenize.push(newtok);\n  return newtok(stream, state);\n}\n\nfunction tokenBase(stream, state) {\n  if (stream.sol() && stream.match(\"=begin\") && stream.eol()) {\n    state.tokenize.push(readBlockComment);\n    return \"comment\";\n  }\n  if (stream.eatSpace()) return null;\n  var ch = stream.next(), m;\n  if (ch == \"`\" || ch == \"'\" || ch == '\"') {\n    return chain(readQuoted(ch, \"string\", ch == '\"' || ch == \"`\"), stream, state);\n  } else if (ch == \"/\") {\n    if (regexpAhead(stream))\n      return chain(readQuoted(ch, \"string.special\", true), stream, state);\n    else\n      return \"operator\";\n  } else if (ch == \"%\") {\n    var style = \"string\", embed = true;\n    if (stream.eat(\"s\")) style = \"atom\";\n    else if (stream.eat(/[WQ]/)) style = \"string\";\n    else if (stream.eat(/[r]/)) style = \"string.special\";\n    else if (stream.eat(/[wxq]/)) { style = \"string\"; embed = false; }\n    var delim = stream.eat(/[^\\w\\s=]/);\n    if (!delim) return \"operator\";\n    if (opening.propertyIsEnumerable(delim)) delim = opening[delim];\n    return chain(readQuoted(delim, style, embed, true), stream, state);\n  } else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == \"<\" && (m = stream.match(/^<([-~])[\\`\\\"\\']?([a-zA-Z_?]\\w*)[\\`\\\"\\']?(?:;|$)/))) {\n    return chain(readHereDoc(m[2], m[1]), stream, state);\n  } else if (ch == \"0\") {\n    if (stream.eat(\"x\")) stream.eatWhile(/[\\da-fA-F]/);\n    else if (stream.eat(\"b\")) stream.eatWhile(/[01]/);\n    else stream.eatWhile(/[0-7]/);\n    return \"number\";\n  } else if (/\\d/.test(ch)) {\n    stream.match(/^[\\d_]*(?:\\.[\\d_]+)?(?:[eE][+\\-]?[\\d_]+)?/);\n    return \"number\";\n  } else if (ch == \"?\") {\n    while (stream.match(/^\\\\[CM]-/)) {}\n    if (stream.eat(\"\\\\\")) stream.eatWhile(/\\w/);\n    else stream.next();\n    return \"string\";\n  } else if (ch == \":\") {\n    if (stream.eat(\"'\")) return chain(readQuoted(\"'\", \"atom\", false), stream, state);\n    if (stream.eat('\"')) return chain(readQuoted('\"', \"atom\", true), stream, state);\n\n    // :> :>> :< :<< are valid symbols\n    if (stream.eat(/[\\<\\>]/)) {\n      stream.eat(/[\\<\\>]/);\n      return \"atom\";\n    }\n\n    // :+ :- :/ :* :| :& :! are valid symbols\n    if (stream.eat(/[\\+\\-\\*\\/\\&\\|\\:\\!]/)) {\n      return \"atom\";\n    }\n\n    // Symbols can't start by a digit\n    if (stream.eat(/[a-zA-Z$@_\\xa1-\\uffff]/)) {\n      stream.eatWhile(/[\\w$\\xa1-\\uffff]/);\n      // Only one ? ! = is allowed and only as the last character\n      stream.eat(/[\\?\\!\\=]/);\n      return \"atom\";\n    }\n    return \"operator\";\n  } else if (ch == \"@\" && stream.match(/^@?[a-zA-Z_\\xa1-\\uffff]/)) {\n    stream.eat(\"@\");\n    stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n    return \"propertyName\";\n  } else if (ch == \"$\") {\n    if (stream.eat(/[a-zA-Z_]/)) {\n      stream.eatWhile(/[\\w]/);\n    } else if (stream.eat(/\\d/)) {\n      stream.eat(/\\d/);\n    } else {\n      stream.next(); // Must be a special global like $: or $!\n    }\n    return \"variableName.special\";\n  } else if (/[a-zA-Z_\\xa1-\\uffff]/.test(ch)) {\n    stream.eatWhile(/[\\w\\xa1-\\uffff]/);\n    stream.eat(/[\\?\\!]/);\n    if (stream.eat(\":\")) return \"atom\";\n    return \"variable\";\n  } else if (ch == \"|\" && (state.varList || state.lastTok == \"{\" || state.lastTok == \"do\")) {\n    curPunc = \"|\";\n    return null;\n  } else if (/[\\(\\)\\[\\]{}\\\\;]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  } else if (ch == \"-\" && stream.eat(\">\")) {\n    return \"operator\";\n  } else if (/[=+\\-\\/*:\\.^%<>~|]/.test(ch)) {\n    var more = stream.eatWhile(/[=+\\-\\/*:\\.^%<>~|]/);\n    if (ch == \".\" && !more) curPunc = \".\";\n    return \"operator\";\n  } else {\n    return null;\n  }\n}\n\nfunction regexpAhead(stream) {\n  var start = stream.pos, depth = 0, next, found = false, escaped = false\n  while ((next = stream.next()) != null) {\n    if (!escaped) {\n      if (\"[{(\".indexOf(next) > -1) {\n        depth++\n      } else if (\"]})\".indexOf(next) > -1) {\n        depth--\n        if (depth < 0) break\n      } else if (next == \"/\" && depth == 0) {\n        found = true\n        break\n      }\n      escaped = next == \"\\\\\"\n    } else {\n      escaped = false\n    }\n  }\n  stream.backUp(stream.pos - start)\n  return found\n}\n\nfunction tokenBaseUntilBrace(depth) {\n  if (!depth) depth = 1;\n  return function(stream, state) {\n    if (stream.peek() == \"}\") {\n      if (depth == 1) {\n        state.tokenize.pop();\n        return state.tokenize[state.tokenize.length-1](stream, state);\n      } else {\n        state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth - 1);\n      }\n    } else if (stream.peek() == \"{\") {\n      state.tokenize[state.tokenize.length - 1] = tokenBaseUntilBrace(depth + 1);\n    }\n    return tokenBase(stream, state);\n  };\n}\nfunction tokenBaseOnce() {\n  var alreadyCalled = false;\n  return function(stream, state) {\n    if (alreadyCalled) {\n      state.tokenize.pop();\n      return state.tokenize[state.tokenize.length-1](stream, state);\n    }\n    alreadyCalled = true;\n    return tokenBase(stream, state);\n  };\n}\nfunction readQuoted(quote, style, embed, unescaped) {\n  return function(stream, state) {\n    var escaped = false, ch;\n\n    if (state.context.type === 'read-quoted-paused') {\n      state.context = state.context.prev;\n      stream.eat(\"}\");\n    }\n\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && (unescaped || !escaped)) {\n        state.tokenize.pop();\n        break;\n      }\n      if (embed && ch == \"#\" && !escaped) {\n        if (stream.eat(\"{\")) {\n          if (quote == \"}\") {\n            state.context = {prev: state.context, type: 'read-quoted-paused'};\n          }\n          state.tokenize.push(tokenBaseUntilBrace());\n          break;\n        } else if (/[@\\$]/.test(stream.peek())) {\n          state.tokenize.push(tokenBaseOnce());\n          break;\n        }\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return style;\n  };\n}\nfunction readHereDoc(phrase, mayIndent) {\n  return function(stream, state) {\n    if (mayIndent) stream.eatSpace()\n    if (stream.match(phrase)) state.tokenize.pop();\n    else stream.skipToEnd();\n    return \"string\";\n  };\n}\nfunction readBlockComment(stream, state) {\n  if (stream.sol() && stream.match(\"=end\") && stream.eol())\n    state.tokenize.pop();\n  stream.skipToEnd();\n  return \"comment\";\n}\n\nexport const ruby = {\n  name: \"ruby\",\n  startState: function(indentUnit) {\n    return {tokenize: [tokenBase],\n            indented: 0,\n            context: {type: \"top\", indented: -indentUnit},\n            continuedLine: false,\n            lastTok: null,\n            varList: false};\n  },\n\n  token: function(stream, state) {\n    curPunc = null;\n    if (stream.sol()) state.indented = stream.indentation();\n    var style = state.tokenize[state.tokenize.length-1](stream, state), kwtype;\n    var thisTok = curPunc;\n    if (style == \"variable\") {\n      var word = stream.current();\n      style = state.lastTok == \".\" ? \"property\"\n        : keywords.propertyIsEnumerable(stream.current()) ? \"keyword\"\n        : /^[A-Z]/.test(word) ? \"tag\"\n        : (state.lastTok == \"def\" || state.lastTok == \"class\" || state.varList) ? \"def\"\n        : \"variable\";\n      if (style == \"keyword\") {\n        thisTok = word;\n        if (indentWords.propertyIsEnumerable(word)) kwtype = \"indent\";\n        else if (dedentWords.propertyIsEnumerable(word)) kwtype = \"dedent\";\n        else if ((word == \"if\" || word == \"unless\") && stream.column() == stream.indentation())\n          kwtype = \"indent\";\n        else if (word == \"do\" && state.context.indented < state.indented)\n          kwtype = \"indent\";\n      }\n    }\n    if (curPunc || (style && style != \"comment\")) state.lastTok = thisTok;\n    if (curPunc == \"|\") state.varList = !state.varList;\n\n    if (kwtype == \"indent\" || /[\\(\\[\\{]/.test(curPunc))\n      state.context = {prev: state.context, type: curPunc || style, indented: state.indented};\n    else if ((kwtype == \"dedent\" || /[\\)\\]\\}]/.test(curPunc)) && state.context.prev)\n      state.context = state.context.prev;\n\n    if (stream.eol())\n      state.continuedLine = (curPunc == \"\\\\\" || style == \"operator\");\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize[state.tokenize.length-1] != tokenBase) return null;\n    var firstChar = textAfter && textAfter.charAt(0);\n    var ct = state.context;\n    var closed = ct.type == closing[firstChar] ||\n        ct.type == \"keyword\" && /^(?:end|until|else|elsif|when|rescue)\\b/.test(textAfter);\n    return ct.indented + (closed ? 0 : cx.unit) +\n      (state.continuedLine ? cx.unit : 0);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*(?:end|rescue|elsif|else|\\})$/,\n    commentTokens: {line: \"#\"},\n    autocomplete: keywordList\n  }\n};\n\n"],
  "mappings": "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",
  "names": ["wordObj", "words", "o", "i", "e", "keywordList", "keywords", "indentWords", "dedentWords", "opening", "closing", "curPunc", "chain", "newtok", "stream", "state", "tokenBase", "readBlockComment", "ch", "m", "readQuoted", "regexpAhead", "style", "embed", "delim", "readHereDoc", "more", "start", "depth", "next", "found", "escaped", "tokenBaseUntilBrace", "tokenBaseOnce", "alreadyCalled", "quote", "unescaped", "phrase", "mayIndent", "ruby", "indentUnit", "kwtype", "thisTok", "word", "textAfter", "cx", "firstChar", "ct", "closed"]
}
