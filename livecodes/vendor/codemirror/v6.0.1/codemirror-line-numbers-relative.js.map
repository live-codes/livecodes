{
  "version": 3,
  "sources": ["../../../../../src/livecodes/editor/codemirror/codemirror-line-numbers-relative.ts"],
  "sourcesContent": ["// from https://github.com/jsjoeio/codemirror-line-numbers-relative\n\nimport { EditorView, type ViewUpdate, lineNumbers, gutter, GutterMarker } from '@codemirror/view';\nimport { Compartment, type EditorState, type Extension } from '@codemirror/state';\n\nconst relativeLineNumberGutter = new Compartment();\n\nclass Marker extends GutterMarker {\n  /** The text to render in gutter */\n  public text: string;\n\n  public constructor(text: string) {\n    super();\n    this.text = text;\n  }\n\n  public toDOM() {\n    return document.createTextNode(this.text);\n  }\n}\n\nconst absoluteLineNumberGutter = gutter({\n  lineMarker: (view, line) => {\n    const lineNo = view.state.doc.lineAt(line.from).number;\n    const absoluteLineNo = new Marker(lineNo.toString());\n    const cursorLine = view.state.doc.lineAt(view.state.selection.asSingle().ranges[0].to).number;\n\n    if (lineNo === cursorLine) {\n      return absoluteLineNo;\n    }\n\n    return null;\n  },\n  initialSpacer: () => {\n    const spacer = new Marker('0');\n    return spacer;\n  },\n});\n\nfunction relativeLineNumbers(lineNo: number, state: EditorState) {\n  if (lineNo > state.doc.lines) {\n    return ' ';\n  }\n  const cursorLine = state.doc.lineAt(state.selection.asSingle().ranges[0].to).number;\n  if (lineNo === cursorLine) {\n    return ' ';\n  } else {\n    return Math.abs(cursorLine - lineNo).toString();\n  }\n}\n// This shows the numbers in the gutter\nconst showLineNumbers = relativeLineNumberGutter.of(\n  lineNumbers({ formatNumber: relativeLineNumbers }),\n);\n\n// This ensures the numbers update\n// when selection (cursorActivity) happens\nconst lineNumbersUpdateListener = EditorView.updateListener.of((viewUpdate: ViewUpdate) => {\n  if (viewUpdate.selectionSet) {\n    viewUpdate.view.dispatch({\n      effects: relativeLineNumberGutter.reconfigure(\n        lineNumbers({ formatNumber: relativeLineNumbers }),\n      ),\n    });\n  }\n});\n\nexport function lineNumbersRelative(): Extension {\n  return [absoluteLineNumberGutter, showLineNumbers, lineNumbersUpdateListener];\n}\n"],
  "mappings": "AAEA,OAAS,cAAAA,EAA6B,eAAAC,EAAa,UAAAC,EAAQ,gBAAAC,MAAoB,mBAC/E,OAAS,eAAAC,MAAqD,oBAE9D,IAAMC,EAA2B,IAAID,EAE/BE,EAAN,cAAqBH,CAAa,CAIzB,YAAYI,EAAc,CAC/B,MAAM,EACN,KAAK,KAAOA,CACd,CAEO,OAAQ,CACb,OAAO,SAAS,eAAe,KAAK,IAAI,CAC1C,CACF,EAEMC,EAA2BN,EAAO,CACtC,WAAY,CAACO,EAAMC,IAAS,CAC1B,IAAMC,EAASF,EAAK,MAAM,IAAI,OAAOC,EAAK,IAAI,EAAE,OAC1CE,EAAiB,IAAIN,EAAOK,EAAO,SAAS,CAAC,EAC7CE,EAAaJ,EAAK,MAAM,IAAI,OAAOA,EAAK,MAAM,UAAU,SAAS,EAAE,OAAO,CAAC,EAAE,EAAE,EAAE,OAEvF,OAAIE,IAAWE,EACND,EAGF,IACT,EACA,cAAe,IACE,IAAIN,EAAO,GAAG,CAGjC,CAAC,EAED,SAASQ,EAAoBH,EAAgBI,EAAoB,CAC/D,GAAIJ,EAASI,EAAM,IAAI,MACrB,MAAO,IAET,IAAMF,EAAaE,EAAM,IAAI,OAAOA,EAAM,UAAU,SAAS,EAAE,OAAO,CAAC,EAAE,EAAE,EAAE,OAC7E,OAAIJ,IAAWE,EACN,IAEA,KAAK,IAAIA,EAAaF,CAAM,EAAE,SAAS,CAElD,CAEA,IAAMK,EAAkBX,EAAyB,GAC/CJ,EAAY,CAAE,aAAca,CAAoB,CAAC,CACnD,EAIMG,EAA4BjB,EAAW,eAAe,GAAIkB,GAA2B,CACrFA,EAAW,cACbA,EAAW,KAAK,SAAS,CACvB,QAASb,EAAyB,YAChCJ,EAAY,CAAE,aAAca,CAAoB,CAAC,CACnD,CACF,CAAC,CAEL,CAAC,EAEM,SAASK,GAAiC,CAC/C,MAAO,CAACX,EAA0BQ,EAAiBC,CAAyB,CAC9E",
  "names": ["EditorView", "lineNumbers", "gutter", "GutterMarker", "Compartment", "relativeLineNumberGutter", "Marker", "text", "absoluteLineNumberGutter", "view", "line", "lineNo", "absoluteLineNo", "cursorLine", "relativeLineNumbers", "state", "showLineNumbers", "lineNumbersUpdateListener", "viewUpdate", "lineNumbersRelative"]
}
