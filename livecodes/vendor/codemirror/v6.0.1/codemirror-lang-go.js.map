{
  "version": 3,
  "sources": ["../../../../../node_modules/@codemirror/legacy-modes/mode/go.js"],
  "sourcesContent": ["var keywords = {\n  \"break\":true, \"case\":true, \"chan\":true, \"const\":true, \"continue\":true,\n  \"default\":true, \"defer\":true, \"else\":true, \"fallthrough\":true, \"for\":true,\n  \"func\":true, \"go\":true, \"goto\":true, \"if\":true, \"import\":true,\n  \"interface\":true, \"map\":true, \"package\":true, \"range\":true, \"return\":true,\n  \"select\":true, \"struct\":true, \"switch\":true, \"type\":true, \"var\":true,\n  \"bool\":true, \"byte\":true, \"complex64\":true, \"complex128\":true,\n  \"float32\":true, \"float64\":true, \"int8\":true, \"int16\":true, \"int32\":true,\n  \"int64\":true, \"string\":true, \"uint8\":true, \"uint16\":true, \"uint32\":true,\n  \"uint64\":true, \"int\":true, \"uint\":true, \"uintptr\":true, \"error\": true,\n  \"rune\":true, \"any\":true, \"comparable\":true\n};\n\nvar atoms = {\n  \"true\":true, \"false\":true, \"iota\":true, \"nil\":true, \"append\":true,\n  \"cap\":true, \"close\":true, \"complex\":true, \"copy\":true, \"delete\":true, \"imag\":true,\n  \"len\":true, \"make\":true, \"new\":true, \"panic\":true, \"print\":true,\n  \"println\":true, \"real\":true, \"recover\":true\n};\n\nvar isOperatorChar = /[+\\-*&^%:=<>!|\\/]/;\n\nvar curPunc;\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\" || ch == \"`\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n  if (/[\\d\\.]/.test(ch)) {\n    if (ch == \".\") {\n      stream.match(/^[0-9]+([eE][\\-+]?[0-9]+)?/);\n    } else if (ch == \"0\") {\n      stream.match(/^[xX][0-9a-fA-F]+/) || stream.match(/^0[0-7]+/);\n    } else {\n      stream.match(/^[0-9]*\\.?[0-9]*([eE][\\-+]?[0-9]+)?/);\n    }\n    return \"number\";\n  }\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n  }\n  if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_\\xa1-\\uffff]/);\n  var cur = stream.current();\n  if (keywords.propertyIsEnumerable(cur)) {\n    if (cur == \"case\" || cur == \"default\") curPunc = \"case\";\n    return \"keyword\";\n  }\n  if (atoms.propertyIsEnumerable(cur)) return \"atom\";\n  return \"variable\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {end = true; break;}\n      escaped = !escaped && quote != \"`\" && next == \"\\\\\";\n    }\n    if (end || !(escaped || quote == \"`\"))\n      state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\nfunction popContext(state) {\n  if (!state.context.prev) return;\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport const go = {\n  name: \"go\",\n  startState: function(indentUnit) {\n    return {\n      tokenize: null,\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n      if (ctx.type == \"case\") ctx.type = \"}\";\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = (state.tokenize || tokenBase)(stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"case\") ctx.type = \"case\";\n    else if (curPunc == \"}\" && ctx.type == \"}\") popContext(state);\n    else if (curPunc == ctx.type) popContext(state);\n    state.startOfLine = false;\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != tokenBase && state.tokenize != null) return null;\n    var ctx = state.context, firstChar = textAfter && textAfter.charAt(0);\n    if (ctx.type == \"case\" && /^(?:case|default)\\b/.test(textAfter)) return ctx.indented;\n    var closing = firstChar == ctx.type;\n    if (ctx.align) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s([{}]|case |default\\s*:)$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n\n"],
  "mappings": "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",
  "names": ["keywords", "atoms", "isOperatorChar", "curPunc", "tokenBase", "stream", "state", "ch", "tokenString", "tokenComment", "cur", "quote", "escaped", "next", "end", "maybeEnd", "Context", "indented", "column", "type", "align", "prev", "pushContext", "col", "popContext", "go", "indentUnit", "ctx", "style", "textAfter", "cx", "firstChar", "closing"]
}
