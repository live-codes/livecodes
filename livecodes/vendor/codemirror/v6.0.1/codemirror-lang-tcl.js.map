{
  "version": 3,
  "sources": ["../../../../../node_modules/@codemirror/legacy-modes/mode/tcl.js"],
  "sourcesContent": ["function parseWords(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = parseWords(\"Tcl safe after append array auto_execok auto_import auto_load \" +\n                          \"auto_mkindex auto_mkindex_old auto_qualify auto_reset bgerror \" +\n                          \"binary break catch cd close concat continue dde eof encoding error \" +\n                          \"eval exec exit expr fblocked fconfigure fcopy file fileevent filename \" +\n                          \"filename flush for foreach format gets glob global history http if \" +\n                          \"incr info interp join lappend lindex linsert list llength load lrange \" +\n                          \"lreplace lsearch lset lsort memory msgcat namespace open package parray \" +\n                          \"pid pkg::create pkg_mkIndex proc puts pwd re_syntax read regex regexp \" +\n                          \"registry regsub rename resource return scan seek set socket source split \" +\n                          \"string subst switch tcl_endOfWord tcl_findLibrary tcl_startOfNextWord \" +\n                          \"tcl_wordBreakAfter tcl_startOfPreviousWord tcl_wordBreakBefore tcltest \" +\n                          \"tclvars tell time trace unknown unset update uplevel upvar variable \" +\n                          \"vwait\");\nvar functions = parseWords(\"if elseif else and not or eq ne in ni for foreach while switch\");\nvar isOperatorChar = /[+\\-*&%=<>!?^\\/\\|]/;\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\nfunction tokenBase(stream, state) {\n  var beforeParams = state.beforeParams;\n  state.beforeParams = false;\n  var ch = stream.next();\n  if ((ch == '\"' || ch == \"'\") && state.inParams) {\n    return chain(stream, state, tokenString(ch));\n  } else if (/[\\[\\]{}\\(\\),;\\.]/.test(ch)) {\n    if (ch == \"(\" && beforeParams) state.inParams = true;\n    else if (ch == \")\") state.inParams = false;\n    return null;\n  } else if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    return \"number\";\n  } else if (ch == \"#\") {\n    if (stream.eat(\"*\"))\n      return chain(stream, state, tokenComment);\n    if (ch == \"#\" && stream.match(/ *\\[ *\\[/))\n      return chain(stream, state, tokenUnparsed);\n    stream.skipToEnd();\n    return \"comment\";\n  } else if (ch == '\"') {\n    stream.skipTo(/\"/);\n    return \"comment\";\n  } else if (ch == \"$\") {\n    stream.eatWhile(/[$_a-z0-9A-Z\\.{:]/);\n    stream.eatWhile(/}/);\n    state.beforeParams = true;\n    return \"builtin\";\n  } else if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return \"comment\";\n  } else {\n    stream.eatWhile(/[\\w\\$_{}\\xa1-\\uffff]/);\n    var word = stream.current().toLowerCase();\n    if (keywords && keywords.propertyIsEnumerable(word))\n      return \"keyword\";\n    if (functions && functions.propertyIsEnumerable(word)) {\n      state.beforeParams = true;\n      return \"keyword\";\n    }\n    return null;\n  }\n}\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\nfunction tokenUnparsed(stream, state) {\n  var maybeEnd = 0, ch;\n  while (ch = stream.next()) {\n    if (ch == \"#\" && maybeEnd == 2) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    if (ch == \"]\")\n      maybeEnd++;\n    else if (ch != \" \")\n      maybeEnd = 0;\n  }\n  return \"meta\";\n}\nexport const tcl = {\n  name: \"tcl\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      beforeParams: false,\n      inParams: false\n    };\n  },\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],
  "mappings": "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",
  "names": ["parseWords", "str", "obj", "words", "i", "keywords", "functions", "isOperatorChar", "chain", "stream", "state", "f", "tokenBase", "beforeParams", "ch", "tokenString", "tokenComment", "tokenUnparsed", "word", "quote", "escaped", "next", "end", "maybeEnd", "tcl"]
}
