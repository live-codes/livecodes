{
  "version": 3,
  "sources": ["../../../../../node_modules/@codemirror/legacy-modes/mode/julia.js"],
  "sourcesContent": ["function wordRegexp(words, end, pre) {\n  if (typeof pre === \"undefined\") pre = \"\";\n  if (typeof end === \"undefined\") { end = \"\\\\b\"; }\n  return new RegExp(\"^\" + pre + \"((\" + words.join(\")|(\") + \"))\" + end);\n}\n\nvar octChar = \"\\\\\\\\[0-7]{1,3}\";\nvar hexChar = \"\\\\\\\\x[A-Fa-f0-9]{1,2}\";\nvar sChar = \"\\\\\\\\[abefnrtv0%?'\\\"\\\\\\\\]\";\nvar uChar = \"([^\\\\u0027\\\\u005C\\\\uD800-\\\\uDFFF]|[\\\\uD800-\\\\uDFFF][\\\\uDC00-\\\\uDFFF])\";\n\nvar asciiOperatorsList = [\n  \"[<>]:\", \"[<>=]=\", \"<<=?\", \">>>?=?\", \"=>\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\",\n  \"\\\\.{2,3}\", \"[\\\\.\\\\\\\\%*+\\\\-<>!\\\\/^|&]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\"\n];\nvar operators = wordRegexp([\n  \"[<>]:\", \"[<>=]=\", \"[!=]==\", \"<<=?\", \">>>?=?\", \"=>?\", \"--?>\", \"<--[->]?\", \"\\\\/\\\\/\",\n  \"[\\\\\\\\%*+\\\\-<>!\\\\/^|&\\\\u00F7\\\\u22BB]=?\", \"\\\\?\", \"\\\\$\", \"~\", \":\",\n  \"\\\\u00D7\", \"\\\\u2208\", \"\\\\u2209\", \"\\\\u220B\", \"\\\\u220C\", \"\\\\u2218\",\n  \"\\\\u221A\", \"\\\\u221B\", \"\\\\u2229\", \"\\\\u222A\", \"\\\\u2260\", \"\\\\u2264\",\n  \"\\\\u2265\", \"\\\\u2286\", \"\\\\u2288\", \"\\\\u228A\", \"\\\\u22C5\",\n  \"\\\\b(in|isa)\\\\b(?!\\.?\\\\()\"\n], \"\");\nvar delimiters = /^[;,()[\\]{}]/;\nvar identifiers = /^[_A-Za-z\\u00A1-\\u2217\\u2219-\\uFFFF][\\w\\u00A1-\\u2217\\u2219-\\uFFFF]*!*/;\n\nvar chars = wordRegexp([octChar, hexChar, sChar, uChar], \"'\");\n\nvar openersList = [\"begin\", \"function\", \"type\", \"struct\", \"immutable\", \"let\",\n                   \"macro\", \"for\", \"while\", \"quote\", \"if\", \"else\", \"elseif\", \"try\",\n                   \"finally\", \"catch\", \"do\"];\n\nvar closersList = [\"end\", \"else\", \"elseif\", \"catch\", \"finally\"];\n\nvar keywordsList = [\"if\", \"else\", \"elseif\", \"while\", \"for\", \"begin\", \"let\",\n                    \"end\", \"do\", \"try\", \"catch\", \"finally\", \"return\", \"break\", \"continue\",\n                    \"global\", \"local\", \"const\", \"export\", \"import\", \"importall\", \"using\",\n                    \"function\", \"where\", \"macro\", \"module\", \"baremodule\", \"struct\", \"type\",\n                    \"mutable\", \"immutable\", \"quote\", \"typealias\", \"abstract\", \"primitive\",\n                    \"bitstype\"];\n\nvar builtinsList = [\"true\", \"false\", \"nothing\", \"NaN\", \"Inf\"];\n\nvar openers = wordRegexp(openersList);\nvar closers = wordRegexp(closersList);\nvar keywords = wordRegexp(keywordsList);\nvar builtins = wordRegexp(builtinsList);\n\nvar macro = /^@[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar symbol = /^:[_A-Za-z\\u00A1-\\uFFFF][\\w\\u00A1-\\uFFFF]*!*/;\nvar stringPrefixes = /^(`|([_A-Za-z\\u00A1-\\uFFFF]*\"(\"\")?))/;\n\nvar macroOperators = wordRegexp(asciiOperatorsList, \"\", \"@\");\nvar symbolOperators = wordRegexp(asciiOperatorsList, \"\", \":\");\n\nfunction inArray(state) {\n  return (state.nestedArrays > 0);\n}\n\nfunction inGenerator(state) {\n  return (state.nestedGenerators > 0);\n}\n\nfunction currentScope(state, n) {\n  if (typeof(n) === \"undefined\") { n = 0; }\n  if (state.scopes.length <= n) {\n    return null;\n  }\n  return state.scopes[state.scopes.length - (n + 1)];\n}\n\n// tokenizers\nfunction tokenBase(stream, state) {\n  // Handle multiline comments\n  if (stream.match('#=', false)) {\n    state.tokenize = tokenComment;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle scope changes\n  var leavingExpr = state.leavingExpr;\n  if (stream.sol()) {\n    leavingExpr = false;\n  }\n  state.leavingExpr = false;\n\n  if (leavingExpr) {\n    if (stream.match(/^'+/)) {\n      return \"operator\";\n    }\n  }\n\n  if (stream.match(/\\.{4,}/)) {\n    return \"error\";\n  } else if (stream.match(/\\.{1,3}/)) {\n    return \"operator\";\n  }\n\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek();\n\n  // Handle single line comments\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (ch === '[') {\n    state.scopes.push('[');\n    state.nestedArrays++;\n  }\n\n  if (ch === '(') {\n    state.scopes.push('(');\n    state.nestedGenerators++;\n  }\n\n  if (inArray(state) && ch === ']') {\n    while (state.scopes.length && currentScope(state) !== \"[\") { state.scopes.pop(); }\n    state.scopes.pop();\n    state.nestedArrays--;\n    state.leavingExpr = true;\n  }\n\n  if (inGenerator(state) && ch === ')') {\n    while (state.scopes.length && currentScope(state) !== \"(\") { state.scopes.pop(); }\n    state.scopes.pop();\n    state.nestedGenerators--;\n    state.leavingExpr = true;\n  }\n\n  if (inArray(state)) {\n    if (state.lastToken == \"end\" && stream.match(':')) {\n      return \"operator\";\n    }\n    if (stream.match('end')) {\n      return \"number\";\n    }\n  }\n\n  var match;\n  if (match = stream.match(openers, false)) {\n    state.scopes.push(match[0]);\n  }\n\n  if (stream.match(closers, false)) {\n    state.scopes.pop();\n  }\n\n  // Handle type annotations\n  if (stream.match(/^::(?![:\\$])/)) {\n    state.tokenize = tokenAnnotation;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle symbols\n  if (!leavingExpr && (stream.match(symbol) || stream.match(symbolOperators))) {\n    return \"builtin\";\n  }\n\n  // Handle parametric types\n  //if (stream.match(/^{[^}]*}(?=\\()/)) {\n  //  return \"builtin\";\n  //}\n\n  // Handle operators and Delimiters\n  if (stream.match(operators)) {\n    return \"operator\";\n  }\n\n  // Handle Number Literals\n  if (stream.match(/^\\.?\\d/, false)) {\n    var imMatcher = RegExp(/^im\\b/);\n    var numberLiteral = false;\n    if (stream.match(/^0x\\.[0-9a-f_]+p[\\+\\-]?[_\\d]+/i)) { numberLiteral = true; }\n    // Integers\n    if (stream.match(/^0x[0-9a-f_]+/i)) { numberLiteral = true; } // Hex\n    if (stream.match(/^0b[01_]+/i)) { numberLiteral = true; } // Binary\n    if (stream.match(/^0o[0-7_]+/i)) { numberLiteral = true; } // Octal\n    // Floats\n    if (stream.match(/^(?:(?:\\d[_\\d]*)?\\.(?!\\.)(?:\\d[_\\d]*)?|\\d[_\\d]*\\.(?!\\.)(?:\\d[_\\d]*))?([Eef][\\+\\-]?[_\\d]+)?/i)) { numberLiteral = true; }\n    if (stream.match(/^\\d[_\\d]*(e[\\+\\-]?\\d+)?/i)) { numberLiteral = true; } // Decimal\n    if (numberLiteral) {\n      // Integer literals may be \"long\"\n      stream.match(imMatcher);\n      state.leavingExpr = true;\n      return \"number\";\n    }\n  }\n\n  // Handle Chars\n  if (stream.match(\"'\")) {\n    state.tokenize = tokenChar;\n    return state.tokenize(stream, state);\n  }\n\n  // Handle Strings\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  }\n\n  if (stream.match(macro) || stream.match(macroOperators)) {\n    return \"meta\";\n  }\n\n  if (stream.match(delimiters)) {\n    return null;\n  }\n\n  if (stream.match(keywords)) {\n    return \"keyword\";\n  }\n\n  if (stream.match(builtins)) {\n    return \"builtin\";\n  }\n\n  var isDefinition = state.isDefinition || state.lastToken == \"function\" ||\n      state.lastToken == \"macro\" || state.lastToken == \"type\" ||\n      state.lastToken == \"struct\" || state.lastToken == \"immutable\";\n\n  if (stream.match(identifiers)) {\n    if (isDefinition) {\n      if (stream.peek() === '.') {\n        state.isDefinition = true;\n        return \"variable\";\n      }\n      state.isDefinition = false;\n      return \"def\";\n    }\n    state.leavingExpr = true;\n    return \"variable\";\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return \"error\";\n}\n\nfunction tokenAnnotation(stream, state) {\n  stream.match(/.*?(?=[,;{}()=\\s]|$)/);\n  if (stream.match('{')) {\n    state.nestedParameters++;\n  } else if (stream.match('}') && state.nestedParameters > 0) {\n    state.nestedParameters--;\n  }\n  if (state.nestedParameters > 0) {\n    stream.match(/.*?(?={|})/) || stream.next();\n  } else if (state.nestedParameters == 0) {\n    state.tokenize = tokenBase;\n  }\n  return \"builtin\";\n}\n\nfunction tokenComment(stream, state) {\n  if (stream.match('#=')) {\n    state.nestedComments++;\n  }\n  if (!stream.match(/.*?(?=(#=|=#))/)) {\n    stream.skipToEnd();\n  }\n  if (stream.match('=#')) {\n    state.nestedComments--;\n    if (state.nestedComments == 0)\n      state.tokenize = tokenBase;\n  }\n  return \"comment\";\n}\n\nfunction tokenChar(stream, state) {\n  var isChar = false, match;\n  if (stream.match(chars)) {\n    isChar = true;\n  } else if (match = stream.match(/\\\\u([a-f0-9]{1,4})(?=')/i)) {\n    var value = parseInt(match[1], 16);\n    if (value <= 55295 || value >= 57344) { // (U+0,U+D7FF), (U+E000,U+FFFF)\n      isChar = true;\n      stream.next();\n    }\n  } else if (match = stream.match(/\\\\U([A-Fa-f0-9]{5,8})(?=')/)) {\n    var value = parseInt(match[1], 16);\n    if (value <= 1114111) { // U+10FFFF\n      isChar = true;\n      stream.next();\n    }\n  }\n  if (isChar) {\n    state.leavingExpr = true;\n    state.tokenize = tokenBase;\n    return \"string\";\n  }\n  if (!stream.match(/^[^']+(?=')/)) { stream.skipToEnd(); }\n  if (stream.match(\"'\")) { state.tokenize = tokenBase; }\n  return \"error\";\n}\n\nfunction tokenStringFactory(delimiter) {\n  if (delimiter.substr(-3) === '\"\"\"') {\n    delimiter = '\"\"\"';\n  } else if (delimiter.substr(-1) === '\"') {\n    delimiter = '\"';\n  }\n  function tokenString(stream, state) {\n    if (stream.eat('\\\\')) {\n      stream.next();\n    } else if (stream.match(delimiter)) {\n      state.tokenize = tokenBase;\n      state.leavingExpr = true;\n      return \"string\";\n    } else {\n      stream.eat(/[`\"]/);\n    }\n    stream.eatWhile(/[^\\\\`\"]/);\n    return \"string\";\n  }\n  return tokenString;\n}\n\nexport const julia = {\n  name: \"julia\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      scopes: [],\n      lastToken: null,\n      leavingExpr: false,\n      isDefinition: false,\n      nestedArrays: 0,\n      nestedComments: 0,\n      nestedGenerators: 0,\n      nestedParameters: 0,\n      firstParenPos: -1\n    };\n  },\n\n  token: function(stream, state) {\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    if (current && style) {\n      state.lastToken = current;\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var delta = 0;\n    if ( textAfter === ']' || textAfter === ')' || /^end\\b/.test(textAfter) ||\n         /^else/.test(textAfter) || /^catch\\b/.test(textAfter) || /^elseif\\b/.test(textAfter) ||\n         /^finally/.test(textAfter) ) {\n      delta = -1;\n    }\n    return (state.scopes.length + delta) * cx.unit;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*(end|else|catch|finally)\\b$/,\n    commentTokens: {line: \"#\", block: {open: \"#=\", close: \"=#\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    autocomplete: keywordsList.concat(builtinsList)\n  }\n};\n"],
  "mappings": "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",
  "names": ["wordRegexp", "words", "end", "pre", "octChar", "hexChar", "sChar", "uChar", "asciiOperatorsList", "operators", "delimiters", "identifiers", "chars", "openersList", "closersList", "keywordsList", "builtinsList", "openers", "closers", "keywords", "builtins", "macro", "symbol", "stringPrefixes", "macroOperators", "symbolOperators", "inArray", "state", "inGenerator", "currentScope", "tokenBase", "stream", "tokenComment", "leavingExpr", "ch", "match", "tokenAnnotation", "imMatcher", "numberLiteral", "tokenChar", "tokenStringFactory", "isDefinition", "isChar", "value", "delimiter", "tokenString", "julia", "style", "current", "textAfter", "cx", "delta"]
}
