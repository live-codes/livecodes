{
  "version": 3,
  "sources": ["../../../../../node_modules/@codemirror/lang-markdown/dist/index.js", "../../../../../node_modules/@lezer/markdown/dist/index.js"],
  "sourcesContent": ["import { EditorSelection, countColumn, Prec, EditorState } from '@codemirror/state';\nimport { keymap } from '@codemirror/view';\nimport { defineLanguageFacet, foldNodeProp, indentNodeProp, languageDataProp, foldService, syntaxTree, Language, LanguageDescription, ParseContext, indentUnit, LanguageSupport } from '@codemirror/language';\nimport { CompletionContext } from '@codemirror/autocomplete';\nimport { parser, GFM, Subscript, Superscript, Emoji, MarkdownParser, parseCode } from '@lezer/markdown';\nimport { html, htmlCompletionSource } from '@codemirror/lang-html';\nimport { NodeProp } from '@lezer/common';\n\nconst data = /*@__PURE__*/defineLanguageFacet({ commentTokens: { block: { open: \"<!--\", close: \"-->\" } } });\nconst headingProp = /*@__PURE__*/new NodeProp();\nconst commonmark = /*@__PURE__*/parser.configure({\n    props: [\n        /*@__PURE__*/foldNodeProp.add(type => {\n            return !type.is(\"Block\") || type.is(\"Document\") || isHeading(type) != null || isList(type) ? undefined\n                : (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to });\n        }),\n        /*@__PURE__*/headingProp.add(isHeading),\n        /*@__PURE__*/indentNodeProp.add({\n            Document: () => null\n        }),\n        /*@__PURE__*/languageDataProp.add({\n            Document: data\n        })\n    ]\n});\nfunction isHeading(type) {\n    let match = /^(?:ATX|Setext)Heading(\\d)$/.exec(type.name);\n    return match ? +match[1] : undefined;\n}\nfunction isList(type) {\n    return type.name == \"OrderedList\" || type.name == \"BulletList\";\n}\nfunction findSectionEnd(headerNode, level) {\n    let last = headerNode;\n    for (;;) {\n        let next = last.nextSibling, heading;\n        if (!next || (heading = isHeading(next.type)) != null && heading <= level)\n            break;\n        last = next;\n    }\n    return last.to;\n}\nconst headerIndent = /*@__PURE__*/foldService.of((state, start, end) => {\n    for (let node = syntaxTree(state).resolveInner(end, -1); node; node = node.parent) {\n        if (node.from < start)\n            break;\n        let heading = node.type.prop(headingProp);\n        if (heading == null)\n            continue;\n        let upto = findSectionEnd(node, heading);\n        if (upto > end)\n            return { from: end, to: upto };\n    }\n    return null;\n});\nfunction mkLang(parser) {\n    return new Language(data, parser, [headerIndent], \"markdown\");\n}\n/**\nLanguage support for strict CommonMark.\n*/\nconst commonmarkLanguage = /*@__PURE__*/mkLang(commonmark);\nconst extended = /*@__PURE__*/commonmark.configure([GFM, Subscript, Superscript, Emoji, {\n        props: [\n            /*@__PURE__*/foldNodeProp.add({\n                Table: (tree, state) => ({ from: state.doc.lineAt(tree.from).to, to: tree.to })\n            })\n        ]\n    }]);\n/**\nLanguage support for [GFM](https://github.github.com/gfm/) plus\nsubscript, superscript, and emoji syntax.\n*/\nconst markdownLanguage = /*@__PURE__*/mkLang(extended);\nfunction getCodeParser(languages, defaultLanguage) {\n    return (info) => {\n        if (info && languages) {\n            let found = null;\n            // Strip anything after whitespace\n            info = /\\S*/.exec(info)[0];\n            if (typeof languages == \"function\")\n                found = languages(info);\n            else\n                found = LanguageDescription.matchLanguageName(languages, info, true);\n            if (found instanceof LanguageDescription)\n                return found.support ? found.support.language.parser : ParseContext.getSkippingParser(found.load());\n            else if (found)\n                return found.parser;\n        }\n        return defaultLanguage ? defaultLanguage.parser : null;\n    };\n}\n\nclass Context {\n    constructor(node, from, to, spaceBefore, spaceAfter, type, item) {\n        this.node = node;\n        this.from = from;\n        this.to = to;\n        this.spaceBefore = spaceBefore;\n        this.spaceAfter = spaceAfter;\n        this.type = type;\n        this.item = item;\n    }\n    blank(maxWidth, trailing = true) {\n        let result = this.spaceBefore + (this.node.name == \"Blockquote\" ? \">\" : \"\");\n        if (maxWidth != null) {\n            while (result.length < maxWidth)\n                result += \" \";\n            return result;\n        }\n        else {\n            for (let i = this.to - this.from - result.length - this.spaceAfter.length; i > 0; i--)\n                result += \" \";\n            return result + (trailing ? this.spaceAfter : \"\");\n        }\n    }\n    marker(doc, add) {\n        let number = this.node.name == \"OrderedList\" ? String((+itemNumber(this.item, doc)[2] + add)) : \"\";\n        return this.spaceBefore + number + this.type + this.spaceAfter;\n    }\n}\nfunction getContext(node, doc) {\n    let nodes = [], context = [];\n    for (let cur = node; cur; cur = cur.parent) {\n        if (cur.name == \"FencedCode\")\n            return context;\n        if (cur.name == \"ListItem\" || cur.name == \"Blockquote\")\n            nodes.push(cur);\n    }\n    for (let i = nodes.length - 1; i >= 0; i--) {\n        let node = nodes[i], match;\n        let line = doc.lineAt(node.from), startPos = node.from - line.from;\n        if (node.name == \"Blockquote\" && (match = /^ *>( ?)/.exec(line.text.slice(startPos)))) {\n            context.push(new Context(node, startPos, startPos + match[0].length, \"\", match[1], \">\", null));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"OrderedList\" &&\n            (match = /^( *)\\d+([.)])( *)/.exec(line.text.slice(startPos)))) {\n            let after = match[3], len = match[0].length;\n            if (after.length >= 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, match[2], node));\n        }\n        else if (node.name == \"ListItem\" && node.parent.name == \"BulletList\" &&\n            (match = /^( *)([-+*])( {1,4}\\[[ xX]\\])?( +)/.exec(line.text.slice(startPos)))) {\n            let after = match[4], len = match[0].length;\n            if (after.length > 4) {\n                after = after.slice(0, after.length - 4);\n                len -= 4;\n            }\n            let type = match[2];\n            if (match[3])\n                type += match[3].replace(/[xX]/, ' ');\n            context.push(new Context(node.parent, startPos, startPos + len, match[1], after, type, node));\n        }\n    }\n    return context;\n}\nfunction itemNumber(item, doc) {\n    return /^(\\s*)(\\d+)(?=[.)])/.exec(doc.sliceString(item.from, item.from + 10));\n}\nfunction renumberList(after, doc, changes, offset = 0) {\n    for (let prev = -1, node = after;;) {\n        if (node.name == \"ListItem\") {\n            let m = itemNumber(node, doc);\n            let number = +m[2];\n            if (prev >= 0) {\n                if (number != prev + 1)\n                    return;\n                changes.push({ from: node.from + m[1].length, to: node.from + m[0].length, insert: String(prev + 2 + offset) });\n            }\n            prev = number;\n        }\n        let next = node.nextSibling;\n        if (!next)\n            break;\n        node = next;\n    }\n}\nfunction normalizeIndent(content, state) {\n    let blank = /^[ \\t]*/.exec(content)[0].length;\n    if (!blank || state.facet(indentUnit) != \"\\t\")\n        return content;\n    let col = countColumn(content, 4, blank);\n    let space = \"\";\n    for (let i = col; i > 0;) {\n        if (i >= 4) {\n            space += \"\\t\";\n            i -= 4;\n        }\n        else {\n            space += \" \";\n            i--;\n        }\n    }\n    return space + content.slice(blank);\n}\n/**\nThis command, when invoked in Markdown context with cursor\nselection(s), will create a new line with the markup for\nblockquotes and lists that were active on the old line. If the\ncursor was directly after the end of the markup for the old line,\ntrailing whitespace and list markers are removed from that line.\n\nThe command does nothing in non-Markdown context, so it should\nnot be used as the only binding for Enter (even in a Markdown\ndocument, HTML and code regions might use a different language).\n*/\nconst insertNewlineContinueMarkup = ({ state, dispatch }) => {\n    let tree = syntaxTree(state), { doc } = state;\n    let dont = null, changes = state.changeByRange(range => {\n        if (!range.empty || !markdownLanguage.isActiveAt(state, range.from, 0))\n            return dont = { range };\n        let pos = range.from, line = doc.lineAt(pos);\n        let context = getContext(tree.resolveInner(pos, -1), doc);\n        while (context.length && context[context.length - 1].from > pos - line.from)\n            context.pop();\n        if (!context.length)\n            return dont = { range };\n        let inner = context[context.length - 1];\n        if (inner.to - inner.spaceAfter.length > pos - line.from)\n            return dont = { range };\n        let emptyLine = pos >= (inner.to - inner.spaceAfter.length) && !/\\S/.test(line.text.slice(inner.to));\n        // Empty line in list\n        if (inner.item && emptyLine) {\n            let first = inner.node.firstChild, second = inner.node.getChild(\"ListItem\", \"ListItem\");\n            // Not second item or blank line before: delete a level of markup\n            if (first.to >= pos || second && second.to < pos ||\n                line.from > 0 && !/[^\\s>]/.test(doc.lineAt(line.from - 1).text)) {\n                let next = context.length > 1 ? context[context.length - 2] : null;\n                let delTo, insert = \"\";\n                if (next && next.item) { // Re-add marker for the list at the next level\n                    delTo = line.from + next.from;\n                    insert = next.marker(doc, 1);\n                }\n                else {\n                    delTo = line.from + (next ? next.to : 0);\n                }\n                let changes = [{ from: delTo, to: pos, insert }];\n                if (inner.node.name == \"OrderedList\")\n                    renumberList(inner.item, doc, changes, -2);\n                if (next && next.node.name == \"OrderedList\")\n                    renumberList(next.item, doc, changes);\n                return { range: EditorSelection.cursor(delTo + insert.length), changes };\n            }\n            else { // Move second item down, making tight two-item list non-tight\n                let insert = blankLine(context, state, line);\n                return { range: EditorSelection.cursor(pos + insert.length + 1),\n                    changes: { from: line.from, insert: insert + state.lineBreak } };\n            }\n        }\n        if (inner.node.name == \"Blockquote\" && emptyLine && line.from) {\n            let prevLine = doc.lineAt(line.from - 1), quoted = />\\s*$/.exec(prevLine.text);\n            // Two aligned empty quoted lines in a row\n            if (quoted && quoted.index == inner.from) {\n                let changes = state.changes([{ from: prevLine.from + quoted.index, to: prevLine.to },\n                    { from: line.from + inner.from, to: line.to }]);\n                return { range: range.map(changes), changes };\n            }\n        }\n        let changes = [];\n        if (inner.node.name == \"OrderedList\")\n            renumberList(inner.item, doc, changes);\n        let continued = inner.item && inner.item.from < line.from;\n        let insert = \"\";\n        // If not dedented\n        if (!continued || /^[\\s\\d.)\\-+*>]*/.exec(line.text)[0].length >= inner.to) {\n            for (let i = 0, e = context.length - 1; i <= e; i++) {\n                insert += i == e && !continued ? context[i].marker(doc, 1)\n                    : context[i].blank(i < e ? countColumn(line.text, 4, context[i + 1].from) - insert.length : null);\n            }\n        }\n        let from = pos;\n        while (from > line.from && /\\s/.test(line.text.charAt(from - line.from - 1)))\n            from--;\n        insert = normalizeIndent(insert, state);\n        if (nonTightList(inner.node, state.doc))\n            insert = blankLine(context, state, line) + state.lineBreak + insert;\n        changes.push({ from, to: pos, insert: state.lineBreak + insert });\n        return { range: EditorSelection.cursor(from + insert.length + 1), changes };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"input\" }));\n    return true;\n};\nfunction isMark(node) {\n    return node.name == \"QuoteMark\" || node.name == \"ListMark\";\n}\nfunction nonTightList(node, doc) {\n    if (node.name != \"OrderedList\" && node.name != \"BulletList\")\n        return false;\n    let first = node.firstChild, second = node.getChild(\"ListItem\", \"ListItem\");\n    if (!second)\n        return false;\n    let line1 = doc.lineAt(first.to), line2 = doc.lineAt(second.from);\n    let empty = /^[\\s>]*$/.test(line1.text);\n    return line1.number + (empty ? 0 : 1) < line2.number;\n}\nfunction blankLine(context, state, line) {\n    let insert = \"\";\n    for (let i = 0, e = context.length - 2; i <= e; i++) {\n        insert += context[i].blank(i < e\n            ? countColumn(line.text, 4, Math.min(line.text.length, context[i + 1].from)) - insert.length\n            : null, i < e);\n    }\n    return normalizeIndent(insert, state);\n}\nfunction contextNodeForDelete(tree, pos) {\n    let node = tree.resolveInner(pos, -1), scan = pos;\n    if (isMark(node)) {\n        scan = node.from;\n        node = node.parent;\n    }\n    for (let prev; prev = node.childBefore(scan);) {\n        if (isMark(prev)) {\n            scan = prev.from;\n        }\n        else if (prev.name == \"OrderedList\" || prev.name == \"BulletList\") {\n            node = prev.lastChild;\n            scan = node.to;\n        }\n        else {\n            break;\n        }\n    }\n    return node;\n}\n/**\nThis command will, when invoked in a Markdown context with the\ncursor directly after list or blockquote markup, delete one level\nof markup. When the markup is for a list, it will be replaced by\nspaces on the first invocation (a further invocation will delete\nthe spaces), to make it easy to continue a list.\n\nWhen not after Markdown block markup, this command will return\nfalse, so it is intended to be bound alongside other deletion\ncommands, with a higher precedence than the more generic commands.\n*/\nconst deleteMarkupBackward = ({ state, dispatch }) => {\n    let tree = syntaxTree(state);\n    let dont = null, changes = state.changeByRange(range => {\n        let pos = range.from, { doc } = state;\n        if (range.empty && markdownLanguage.isActiveAt(state, range.from)) {\n            let line = doc.lineAt(pos);\n            let context = getContext(contextNodeForDelete(tree, pos), doc);\n            if (context.length) {\n                let inner = context[context.length - 1];\n                let spaceEnd = inner.to - inner.spaceAfter.length + (inner.spaceAfter ? 1 : 0);\n                // Delete extra trailing space after markup\n                if (pos - line.from > spaceEnd && !/\\S/.test(line.text.slice(spaceEnd, pos - line.from)))\n                    return { range: EditorSelection.cursor(line.from + spaceEnd),\n                        changes: { from: line.from + spaceEnd, to: pos } };\n                if (pos - line.from == spaceEnd &&\n                    // Only apply this if we're on the line that has the\n                    // construct's syntax, or there's only indentation in the\n                    // target range\n                    (!inner.item || line.from <= inner.item.from || !/\\S/.test(line.text.slice(0, inner.to)))) {\n                    let start = line.from + inner.from;\n                    // Replace a list item marker with blank space\n                    if (inner.item && inner.node.from < inner.item.from && /\\S/.test(line.text.slice(inner.from, inner.to))) {\n                        let insert = inner.blank(countColumn(line.text, 4, inner.to) - countColumn(line.text, 4, inner.from));\n                        if (start == line.from)\n                            insert = normalizeIndent(insert, state);\n                        return { range: EditorSelection.cursor(start + insert.length),\n                            changes: { from: start, to: line.from + inner.to, insert } };\n                    }\n                    // Delete one level of indentation\n                    if (start < pos)\n                        return { range: EditorSelection.cursor(start), changes: { from: start, to: pos } };\n                }\n            }\n        }\n        return dont = { range };\n    });\n    if (dont)\n        return false;\n    dispatch(state.update(changes, { scrollIntoView: true, userEvent: \"delete\" }));\n    return true;\n};\n\n/**\nA small keymap with Markdown-specific bindings. Binds Enter to\n[`insertNewlineContinueMarkup`](https://codemirror.net/6/docs/ref/#lang-markdown.insertNewlineContinueMarkup)\nand Backspace to\n[`deleteMarkupBackward`](https://codemirror.net/6/docs/ref/#lang-markdown.deleteMarkupBackward).\n*/\nconst markdownKeymap = [\n    { key: \"Enter\", run: insertNewlineContinueMarkup },\n    { key: \"Backspace\", run: deleteMarkupBackward }\n];\nconst htmlNoMatch = /*@__PURE__*/html({ matchClosingTags: false });\n/**\nMarkdown language support.\n*/\nfunction markdown(config = {}) {\n    let { codeLanguages, defaultCodeLanguage, addKeymap = true, base: { parser } = commonmarkLanguage, completeHTMLTags = true, htmlTagLanguage = htmlNoMatch } = config;\n    if (!(parser instanceof MarkdownParser))\n        throw new RangeError(\"Base parser provided to `markdown` should be a Markdown parser\");\n    let extensions = config.extensions ? [config.extensions] : [];\n    let support = [htmlTagLanguage.support], defaultCode;\n    if (defaultCodeLanguage instanceof LanguageSupport) {\n        support.push(defaultCodeLanguage.support);\n        defaultCode = defaultCodeLanguage.language;\n    }\n    else if (defaultCodeLanguage) {\n        defaultCode = defaultCodeLanguage;\n    }\n    let codeParser = codeLanguages || defaultCode ? getCodeParser(codeLanguages, defaultCode) : undefined;\n    extensions.push(parseCode({ codeParser, htmlParser: htmlTagLanguage.language.parser }));\n    if (addKeymap)\n        support.push(Prec.high(keymap.of(markdownKeymap)));\n    let lang = mkLang(parser.configure(extensions));\n    if (completeHTMLTags)\n        support.push(lang.data.of({ autocomplete: htmlTagCompletion }));\n    return new LanguageSupport(lang, support);\n}\nfunction htmlTagCompletion(context) {\n    let { state, pos } = context, m = /<[:\\-\\.\\w\\u00b7-\\uffff]*$/.exec(state.sliceDoc(pos - 25, pos));\n    if (!m)\n        return null;\n    let tree = syntaxTree(state).resolveInner(pos, -1);\n    while (tree && !tree.type.isTop) {\n        if (tree.name == \"CodeBlock\" || tree.name == \"FencedCode\" || tree.name == \"ProcessingInstructionBlock\" ||\n            tree.name == \"CommentBlock\" || tree.name == \"Link\" || tree.name == \"Image\")\n            return null;\n        tree = tree.parent;\n    }\n    return {\n        from: pos - m[0].length, to: pos,\n        options: htmlTagCompletions(),\n        validFor: /^<[:\\-\\.\\w\\u00b7-\\uffff]*$/\n    };\n}\nlet _tagCompletions = null;\nfunction htmlTagCompletions() {\n    if (_tagCompletions)\n        return _tagCompletions;\n    let result = htmlCompletionSource(new CompletionContext(EditorState.create({ extensions: htmlNoMatch }), 0, true));\n    return _tagCompletions = result ? result.options : [];\n}\n\nexport { commonmarkLanguage, deleteMarkupBackward, insertNewlineContinueMarkup, markdown, markdownKeymap, markdownLanguage };\n", "import { NodeType, NodeProp, NodeSet, Tree, Parser, parseMixed } from '@lezer/common';\nimport { styleTags, tags, Tag } from '@lezer/highlight';\n\nclass CompositeBlock {\n    constructor(type, \n    // Used for indentation in list items, markup character in lists\n    value, from, hash, end, children, positions) {\n        this.type = type;\n        this.value = value;\n        this.from = from;\n        this.hash = hash;\n        this.end = end;\n        this.children = children;\n        this.positions = positions;\n        this.hashProp = [[NodeProp.contextHash, hash]];\n    }\n    static create(type, value, from, parentHash, end) {\n        let hash = (parentHash + (parentHash << 8) + type + (value << 4)) | 0;\n        return new CompositeBlock(type, value, from, hash, end, [], []);\n    }\n    addChild(child, pos) {\n        if (child.prop(NodeProp.contextHash) != this.hash)\n            child = new Tree(child.type, child.children, child.positions, child.length, this.hashProp);\n        this.children.push(child);\n        this.positions.push(pos);\n    }\n    toTree(nodeSet, end = this.end) {\n        let last = this.children.length - 1;\n        if (last >= 0)\n            end = Math.max(end, this.positions[last] + this.children[last].length + this.from);\n        let tree = new Tree(nodeSet.types[this.type], this.children, this.positions, end - this.from).balance({\n            makeTree: (children, positions, length) => new Tree(NodeType.none, children, positions, length, this.hashProp)\n        });\n        return tree;\n    }\n}\nvar Type;\n(function (Type) {\n    Type[Type[\"Document\"] = 1] = \"Document\";\n    Type[Type[\"CodeBlock\"] = 2] = \"CodeBlock\";\n    Type[Type[\"FencedCode\"] = 3] = \"FencedCode\";\n    Type[Type[\"Blockquote\"] = 4] = \"Blockquote\";\n    Type[Type[\"HorizontalRule\"] = 5] = \"HorizontalRule\";\n    Type[Type[\"BulletList\"] = 6] = \"BulletList\";\n    Type[Type[\"OrderedList\"] = 7] = \"OrderedList\";\n    Type[Type[\"ListItem\"] = 8] = \"ListItem\";\n    Type[Type[\"ATXHeading1\"] = 9] = \"ATXHeading1\";\n    Type[Type[\"ATXHeading2\"] = 10] = \"ATXHeading2\";\n    Type[Type[\"ATXHeading3\"] = 11] = \"ATXHeading3\";\n    Type[Type[\"ATXHeading4\"] = 12] = \"ATXHeading4\";\n    Type[Type[\"ATXHeading5\"] = 13] = \"ATXHeading5\";\n    Type[Type[\"ATXHeading6\"] = 14] = \"ATXHeading6\";\n    Type[Type[\"SetextHeading1\"] = 15] = \"SetextHeading1\";\n    Type[Type[\"SetextHeading2\"] = 16] = \"SetextHeading2\";\n    Type[Type[\"HTMLBlock\"] = 17] = \"HTMLBlock\";\n    Type[Type[\"LinkReference\"] = 18] = \"LinkReference\";\n    Type[Type[\"Paragraph\"] = 19] = \"Paragraph\";\n    Type[Type[\"CommentBlock\"] = 20] = \"CommentBlock\";\n    Type[Type[\"ProcessingInstructionBlock\"] = 21] = \"ProcessingInstructionBlock\";\n    // Inline\n    Type[Type[\"Escape\"] = 22] = \"Escape\";\n    Type[Type[\"Entity\"] = 23] = \"Entity\";\n    Type[Type[\"HardBreak\"] = 24] = \"HardBreak\";\n    Type[Type[\"Emphasis\"] = 25] = \"Emphasis\";\n    Type[Type[\"StrongEmphasis\"] = 26] = \"StrongEmphasis\";\n    Type[Type[\"Link\"] = 27] = \"Link\";\n    Type[Type[\"Image\"] = 28] = \"Image\";\n    Type[Type[\"InlineCode\"] = 29] = \"InlineCode\";\n    Type[Type[\"HTMLTag\"] = 30] = \"HTMLTag\";\n    Type[Type[\"Comment\"] = 31] = \"Comment\";\n    Type[Type[\"ProcessingInstruction\"] = 32] = \"ProcessingInstruction\";\n    Type[Type[\"URL\"] = 33] = \"URL\";\n    // Smaller tokens\n    Type[Type[\"HeaderMark\"] = 34] = \"HeaderMark\";\n    Type[Type[\"QuoteMark\"] = 35] = \"QuoteMark\";\n    Type[Type[\"ListMark\"] = 36] = \"ListMark\";\n    Type[Type[\"LinkMark\"] = 37] = \"LinkMark\";\n    Type[Type[\"EmphasisMark\"] = 38] = \"EmphasisMark\";\n    Type[Type[\"CodeMark\"] = 39] = \"CodeMark\";\n    Type[Type[\"CodeText\"] = 40] = \"CodeText\";\n    Type[Type[\"CodeInfo\"] = 41] = \"CodeInfo\";\n    Type[Type[\"LinkTitle\"] = 42] = \"LinkTitle\";\n    Type[Type[\"LinkLabel\"] = 43] = \"LinkLabel\";\n})(Type || (Type = {}));\n/// Data structure used to accumulate a block's content during [leaf\n/// block parsing](#BlockParser.leaf).\nclass LeafBlock {\n    /// @internal\n    constructor(\n    /// The start position of the block.\n    start, \n    /// The block's text content.\n    content) {\n        this.start = start;\n        this.content = content;\n        /// @internal\n        this.marks = [];\n        /// The block parsers active for this block.\n        this.parsers = [];\n    }\n}\n/// Data structure used during block-level per-line parsing.\nclass Line {\n    constructor() {\n        /// The line's full text.\n        this.text = \"\";\n        /// The base indent provided by the composite contexts (that have\n        /// been handled so far).\n        this.baseIndent = 0;\n        /// The string position corresponding to the base indent.\n        this.basePos = 0;\n        /// The number of contexts handled @internal\n        this.depth = 0;\n        /// Any markers (i.e. block quote markers) parsed for the contexts. @internal\n        this.markers = [];\n        /// The position of the next non-whitespace character beyond any\n        /// list, blockquote, or other composite block markers.\n        this.pos = 0;\n        /// The column of the next non-whitespace character.\n        this.indent = 0;\n        /// The character code of the character after `pos`.\n        this.next = -1;\n    }\n    /// @internal\n    forward() {\n        if (this.basePos > this.pos)\n            this.forwardInner();\n    }\n    /// @internal\n    forwardInner() {\n        let newPos = this.skipSpace(this.basePos);\n        this.indent = this.countIndent(newPos, this.pos, this.indent);\n        this.pos = newPos;\n        this.next = newPos == this.text.length ? -1 : this.text.charCodeAt(newPos);\n    }\n    /// Skip whitespace after the given position, return the position of\n    /// the next non-space character or the end of the line if there's\n    /// only space after `from`.\n    skipSpace(from) { return skipSpace(this.text, from); }\n    /// @internal\n    reset(text) {\n        this.text = text;\n        this.baseIndent = this.basePos = this.pos = this.indent = 0;\n        this.forwardInner();\n        this.depth = 1;\n        while (this.markers.length)\n            this.markers.pop();\n    }\n    /// Move the line's base position forward to the given position.\n    /// This should only be called by composite [block\n    /// parsers](#BlockParser.parse) or [markup skipping\n    /// functions](#NodeSpec.composite).\n    moveBase(to) {\n        this.basePos = to;\n        this.baseIndent = this.countIndent(to, this.pos, this.indent);\n    }\n    /// Move the line's base position forward to the given _column_.\n    moveBaseColumn(indent) {\n        this.baseIndent = indent;\n        this.basePos = this.findColumn(indent);\n    }\n    /// Store a composite-block-level marker. Should be called from\n    /// [markup skipping functions](#NodeSpec.composite) when they\n    /// consume any non-whitespace characters.\n    addMarker(elt) {\n        this.markers.push(elt);\n    }\n    /// Find the column position at `to`, optionally starting at a given\n    /// position and column.\n    countIndent(to, from = 0, indent = 0) {\n        for (let i = from; i < to; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return indent;\n    }\n    /// Find the position corresponding to the given column.\n    findColumn(goal) {\n        let i = 0;\n        for (let indent = 0; i < this.text.length && indent < goal; i++)\n            indent += this.text.charCodeAt(i) == 9 ? 4 - indent % 4 : 1;\n        return i;\n    }\n    /// @internal\n    scrub() {\n        if (!this.baseIndent)\n            return this.text;\n        let result = \"\";\n        for (let i = 0; i < this.basePos; i++)\n            result += \" \";\n        return result + this.text.slice(this.basePos);\n    }\n}\nfunction skipForList(bl, cx, line) {\n    if (line.pos == line.text.length ||\n        (bl != cx.block && line.indent >= cx.stack[line.depth + 1].value + line.baseIndent))\n        return true;\n    if (line.indent >= line.baseIndent + 4)\n        return false;\n    let size = (bl.type == Type.OrderedList ? isOrderedList : isBulletList)(line, cx, false);\n    return size > 0 &&\n        (bl.type != Type.BulletList || isHorizontalRule(line, cx, false) < 0) &&\n        line.text.charCodeAt(line.pos + size - 1) == bl.value;\n}\nconst DefaultSkipMarkup = {\n    [Type.Blockquote](bl, cx, line) {\n        if (line.next != 62 /* '>' */)\n            return false;\n        line.markers.push(elt(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1));\n        line.moveBase(line.pos + (space(line.text.charCodeAt(line.pos + 1)) ? 2 : 1));\n        bl.end = cx.lineStart + line.text.length;\n        return true;\n    },\n    [Type.ListItem](bl, _cx, line) {\n        if (line.indent < line.baseIndent + bl.value && line.next > -1)\n            return false;\n        line.moveBaseColumn(line.baseIndent + bl.value);\n        return true;\n    },\n    [Type.OrderedList]: skipForList,\n    [Type.BulletList]: skipForList,\n    [Type.Document]() { return true; }\n};\nfunction space(ch) { return ch == 32 || ch == 9 || ch == 10 || ch == 13; }\nfunction skipSpace(line, i = 0) {\n    while (i < line.length && space(line.charCodeAt(i)))\n        i++;\n    return i;\n}\nfunction skipSpaceBack(line, i, to) {\n    while (i > to && space(line.charCodeAt(i - 1)))\n        i--;\n    return i;\n}\nfunction isFencedCode(line) {\n    if (line.next != 96 && line.next != 126 /* '`~' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    if (pos < line.pos + 3)\n        return -1;\n    if (line.next == 96)\n        for (let i = pos; i < line.text.length; i++)\n            if (line.text.charCodeAt(i) == 96)\n                return -1;\n    return pos;\n}\nfunction isBlockquote(line) {\n    return line.next != 62 /* '>' */ ? -1 : line.text.charCodeAt(line.pos + 1) == 32 ? 2 : 1;\n}\nfunction isHorizontalRule(line, cx, breaking) {\n    if (line.next != 42 && line.next != 45 && line.next != 95 /* '_-*' */)\n        return -1;\n    let count = 1;\n    for (let pos = line.pos + 1; pos < line.text.length; pos++) {\n        let ch = line.text.charCodeAt(pos);\n        if (ch == line.next)\n            count++;\n        else if (!space(ch))\n            return -1;\n    }\n    // Setext headers take precedence\n    if (breaking && line.next == 45 && isSetextUnderline(line) > -1 && line.depth == cx.stack.length)\n        return -1;\n    return count < 3 ? -1 : 1;\n}\nfunction inList(cx, type) {\n    for (let i = cx.stack.length - 1; i >= 0; i--)\n        if (cx.stack[i].type == type)\n            return true;\n    return false;\n}\nfunction isBulletList(line, cx, breaking) {\n    return (line.next == 45 || line.next == 43 || line.next == 42 /* '-+*' */) &&\n        (line.pos == line.text.length - 1 || space(line.text.charCodeAt(line.pos + 1))) &&\n        (!breaking || inList(cx, Type.BulletList) || line.skipSpace(line.pos + 2) < line.text.length) ? 1 : -1;\n}\nfunction isOrderedList(line, cx, breaking) {\n    let pos = line.pos, next = line.next;\n    for (;;) {\n        if (next >= 48 && next <= 57 /* '0-9' */)\n            pos++;\n        else\n            break;\n        if (pos == line.text.length)\n            return -1;\n        next = line.text.charCodeAt(pos);\n    }\n    if (pos == line.pos || pos > line.pos + 9 ||\n        (next != 46 && next != 41 /* '.)' */) ||\n        (pos < line.text.length - 1 && !space(line.text.charCodeAt(pos + 1))) ||\n        breaking && !inList(cx, Type.OrderedList) &&\n            (line.skipSpace(pos + 1) == line.text.length || pos > line.pos + 1 || line.next != 49 /* '1' */))\n        return -1;\n    return pos + 1 - line.pos;\n}\nfunction isAtxHeading(line) {\n    if (line.next != 35 /* '#' */)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == 35)\n        pos++;\n    if (pos < line.text.length && line.text.charCodeAt(pos) != 32)\n        return -1;\n    let size = pos - line.pos;\n    return size > 6 ? -1 : size;\n}\nfunction isSetextUnderline(line) {\n    if (line.next != 45 && line.next != 61 /* '-=' */ || line.indent >= line.baseIndent + 4)\n        return -1;\n    let pos = line.pos + 1;\n    while (pos < line.text.length && line.text.charCodeAt(pos) == line.next)\n        pos++;\n    let end = pos;\n    while (pos < line.text.length && space(line.text.charCodeAt(pos)))\n        pos++;\n    return pos == line.text.length ? end : -1;\n}\nconst EmptyLine = /^[ \\t]*$/, CommentEnd = /-->/, ProcessingEnd = /\\?>/;\nconst HTMLBlockStyle = [\n    [/^<(?:script|pre|style)(?:\\s|>|$)/i, /<\\/(?:script|pre|style)>/i],\n    [/^\\s*<!--/, CommentEnd],\n    [/^\\s*<\\?/, ProcessingEnd],\n    [/^\\s*<![A-Z]/, />/],\n    [/^\\s*<!\\[CDATA\\[/, /\\]\\]>/],\n    [/^\\s*<\\/?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\\s|\\/?>|$)/i, EmptyLine],\n    [/^\\s*(?:<\\/[a-z][\\w-]*\\s*>|<[a-z][\\w-]*(\\s+[a-z:_][\\w-.]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*>)\\s*$/i, EmptyLine]\n];\nfunction isHTMLBlock(line, _cx, breaking) {\n    if (line.next != 60 /* '<' */)\n        return -1;\n    let rest = line.text.slice(line.pos);\n    for (let i = 0, e = HTMLBlockStyle.length - (breaking ? 1 : 0); i < e; i++)\n        if (HTMLBlockStyle[i][0].test(rest))\n            return i;\n    return -1;\n}\nfunction getListIndent(line, pos) {\n    let indentAfter = line.countIndent(pos, line.pos, line.indent);\n    let indented = line.countIndent(line.skipSpace(pos), pos, indentAfter);\n    return indented >= indentAfter + 5 ? indentAfter + 1 : indented;\n}\nfunction addCodeText(marks, from, to) {\n    let last = marks.length - 1;\n    if (last >= 0 && marks[last].to == from && marks[last].type == Type.CodeText)\n        marks[last].to = to;\n    else\n        marks.push(elt(Type.CodeText, from, to));\n}\n// Rules for parsing blocks. A return value of false means the rule\n// doesn't apply here, true means it does. When true is returned and\n// `p.line` has been updated, the rule is assumed to have consumed a\n// leaf block. Otherwise, it is assumed to have opened a context.\nconst DefaultBlockParsers = {\n    LinkReference: undefined,\n    IndentedCode(cx, line) {\n        let base = line.baseIndent + 4;\n        if (line.indent < base)\n            return false;\n        let start = line.findColumn(base);\n        let from = cx.lineStart + start, to = cx.lineStart + line.text.length;\n        let marks = [], pendingMarks = [];\n        addCodeText(marks, from, to);\n        while (cx.nextLine() && line.depth >= cx.stack.length) {\n            if (line.pos == line.text.length) { // Empty\n                addCodeText(pendingMarks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    pendingMarks.push(m);\n            }\n            else if (line.indent < base) {\n                break;\n            }\n            else {\n                if (pendingMarks.length) {\n                    for (let m of pendingMarks) {\n                        if (m.type == Type.CodeText)\n                            addCodeText(marks, m.from, m.to);\n                        else\n                            marks.push(m);\n                    }\n                    pendingMarks = [];\n                }\n                addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                to = cx.lineStart + line.text.length;\n                let codeStart = cx.lineStart + line.findColumn(line.baseIndent + 4);\n                if (codeStart < to)\n                    addCodeText(marks, codeStart, to);\n            }\n        }\n        if (pendingMarks.length) {\n            pendingMarks = pendingMarks.filter(m => m.type != Type.CodeText);\n            if (pendingMarks.length)\n                line.markers = pendingMarks.concat(line.markers);\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(Type.CodeBlock, to - from), from);\n        return true;\n    },\n    FencedCode(cx, line) {\n        let fenceEnd = isFencedCode(line);\n        if (fenceEnd < 0)\n            return false;\n        let from = cx.lineStart + line.pos, ch = line.next, len = fenceEnd - line.pos;\n        let infoFrom = line.skipSpace(fenceEnd), infoTo = skipSpaceBack(line.text, line.text.length, infoFrom);\n        let marks = [elt(Type.CodeMark, from, from + len)];\n        if (infoFrom < infoTo)\n            marks.push(elt(Type.CodeInfo, cx.lineStart + infoFrom, cx.lineStart + infoTo));\n        for (let first = true; cx.nextLine() && line.depth >= cx.stack.length; first = false) {\n            let i = line.pos;\n            if (line.indent - line.baseIndent < 4)\n                while (i < line.text.length && line.text.charCodeAt(i) == ch)\n                    i++;\n            if (i - line.pos >= len && line.skipSpace(i) == line.text.length) {\n                for (let m of line.markers)\n                    marks.push(m);\n                marks.push(elt(Type.CodeMark, cx.lineStart + line.pos, cx.lineStart + i));\n                cx.nextLine();\n                break;\n            }\n            else {\n                if (!first)\n                    addCodeText(marks, cx.lineStart - 1, cx.lineStart);\n                for (let m of line.markers)\n                    marks.push(m);\n                let textStart = cx.lineStart + line.basePos, textEnd = cx.lineStart + line.text.length;\n                if (textStart < textEnd)\n                    addCodeText(marks, textStart, textEnd);\n            }\n        }\n        cx.addNode(cx.buffer.writeElements(marks, -from)\n            .finish(Type.FencedCode, cx.prevLineEnd() - from), from);\n        return true;\n    },\n    Blockquote(cx, line) {\n        let size = isBlockquote(line);\n        if (size < 0)\n            return false;\n        cx.startContext(Type.Blockquote, line.pos);\n        cx.addNode(Type.QuoteMark, cx.lineStart + line.pos, cx.lineStart + line.pos + 1);\n        line.moveBase(line.pos + size);\n        return null;\n    },\n    HorizontalRule(cx, line) {\n        if (isHorizontalRule(line, cx, false) < 0)\n            return false;\n        let from = cx.lineStart + line.pos;\n        cx.nextLine();\n        cx.addNode(Type.HorizontalRule, from);\n        return true;\n    },\n    BulletList(cx, line) {\n        let size = isBulletList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.BulletList)\n            cx.startContext(Type.BulletList, line.basePos, line.next);\n        let newBase = getListIndent(line, line.pos + 1);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    OrderedList(cx, line) {\n        let size = isOrderedList(line, cx, false);\n        if (size < 0)\n            return false;\n        if (cx.block.type != Type.OrderedList)\n            cx.startContext(Type.OrderedList, line.basePos, line.text.charCodeAt(line.pos + size - 1));\n        let newBase = getListIndent(line, line.pos + size);\n        cx.startContext(Type.ListItem, line.basePos, newBase - line.baseIndent);\n        cx.addNode(Type.ListMark, cx.lineStart + line.pos, cx.lineStart + line.pos + size);\n        line.moveBaseColumn(newBase);\n        return null;\n    },\n    ATXHeading(cx, line) {\n        let size = isAtxHeading(line);\n        if (size < 0)\n            return false;\n        let off = line.pos, from = cx.lineStart + off;\n        let endOfSpace = skipSpaceBack(line.text, line.text.length, off), after = endOfSpace;\n        while (after > off && line.text.charCodeAt(after - 1) == line.next)\n            after--;\n        if (after == endOfSpace || after == off || !space(line.text.charCodeAt(after - 1)))\n            after = line.text.length;\n        let buf = cx.buffer\n            .write(Type.HeaderMark, 0, size)\n            .writeElements(cx.parser.parseInline(line.text.slice(off + size + 1, after), from + size + 1), -from);\n        if (after < line.text.length)\n            buf.write(Type.HeaderMark, after - off, endOfSpace - off);\n        let node = buf.finish(Type.ATXHeading1 - 1 + size, line.text.length - off);\n        cx.nextLine();\n        cx.addNode(node, from);\n        return true;\n    },\n    HTMLBlock(cx, line) {\n        let type = isHTMLBlock(line, cx, false);\n        if (type < 0)\n            return false;\n        let from = cx.lineStart + line.pos, end = HTMLBlockStyle[type][1];\n        let marks = [], trailing = end != EmptyLine;\n        while (!end.test(line.text) && cx.nextLine()) {\n            if (line.depth < cx.stack.length) {\n                trailing = false;\n                break;\n            }\n            for (let m of line.markers)\n                marks.push(m);\n        }\n        if (trailing)\n            cx.nextLine();\n        let nodeType = end == CommentEnd ? Type.CommentBlock : end == ProcessingEnd ? Type.ProcessingInstructionBlock : Type.HTMLBlock;\n        let to = cx.prevLineEnd();\n        cx.addNode(cx.buffer.writeElements(marks, -from).finish(nodeType, to - from), from);\n        return true;\n    },\n    SetextHeading: undefined // Specifies relative precedence for block-continue function\n};\n// This implements a state machine that incrementally parses link references. At each\n// next line, it looks ahead to see if the line continues the reference or not. If it\n// doesn't and a valid link is available ending before that line, it finishes that.\n// Similarly, on `finish` (when the leaf is terminated by external circumstances), it\n// creates a link reference if there's a valid reference up to the current point.\nclass LinkReferenceParser {\n    constructor(leaf) {\n        this.stage = 0 /* Start */;\n        this.elts = [];\n        this.pos = 0;\n        this.start = leaf.start;\n        this.advance(leaf.content);\n    }\n    nextLine(cx, line, leaf) {\n        if (this.stage == -1 /* Failed */)\n            return false;\n        let content = leaf.content + \"\\n\" + line.scrub();\n        let finish = this.advance(content);\n        if (finish > -1 && finish < content.length)\n            return this.complete(cx, leaf, finish);\n        return false;\n    }\n    finish(cx, leaf) {\n        if ((this.stage == 2 /* Link */ || this.stage == 3 /* Title */) && skipSpace(leaf.content, this.pos) == leaf.content.length)\n            return this.complete(cx, leaf, leaf.content.length);\n        return false;\n    }\n    complete(cx, leaf, len) {\n        cx.addLeafElement(leaf, elt(Type.LinkReference, this.start, this.start + len, this.elts));\n        return true;\n    }\n    nextStage(elt) {\n        if (elt) {\n            this.pos = elt.to - this.start;\n            this.elts.push(elt);\n            this.stage++;\n            return true;\n        }\n        if (elt === false)\n            this.stage = -1 /* Failed */;\n        return false;\n    }\n    advance(content) {\n        for (;;) {\n            if (this.stage == -1 /* Failed */) {\n                return -1;\n            }\n            else if (this.stage == 0 /* Start */) {\n                if (!this.nextStage(parseLinkLabel(content, this.pos, this.start, true)))\n                    return -1;\n                if (content.charCodeAt(this.pos) != 58 /* ':' */)\n                    return this.stage = -1 /* Failed */;\n                this.elts.push(elt(Type.LinkMark, this.pos + this.start, this.pos + this.start + 1));\n                this.pos++;\n            }\n            else if (this.stage == 1 /* Label */) {\n                if (!this.nextStage(parseURL(content, skipSpace(content, this.pos), this.start)))\n                    return -1;\n            }\n            else if (this.stage == 2 /* Link */) {\n                let skip = skipSpace(content, this.pos), end = 0;\n                if (skip > this.pos) {\n                    let title = parseLinkTitle(content, skip, this.start);\n                    if (title) {\n                        let titleEnd = lineEnd(content, title.to - this.start);\n                        if (titleEnd > 0) {\n                            this.nextStage(title);\n                            end = titleEnd;\n                        }\n                    }\n                }\n                if (!end)\n                    end = lineEnd(content, this.pos);\n                return end > 0 && end < content.length ? end : -1;\n            }\n            else { // RefStage.Title\n                return lineEnd(content, this.pos);\n            }\n        }\n    }\n}\nfunction lineEnd(text, pos) {\n    for (; pos < text.length; pos++) {\n        let next = text.charCodeAt(pos);\n        if (next == 10)\n            break;\n        if (!space(next))\n            return -1;\n    }\n    return pos;\n}\nclass SetextHeadingParser {\n    nextLine(cx, line, leaf) {\n        let underline = line.depth < cx.stack.length ? -1 : isSetextUnderline(line);\n        let next = line.next;\n        if (underline < 0)\n            return false;\n        let underlineMark = elt(Type.HeaderMark, cx.lineStart + line.pos, cx.lineStart + underline);\n        cx.nextLine();\n        cx.addLeafElement(leaf, elt(next == 61 ? Type.SetextHeading1 : Type.SetextHeading2, leaf.start, cx.prevLineEnd(), [\n            ...cx.parser.parseInline(leaf.content, leaf.start),\n            underlineMark\n        ]));\n        return true;\n    }\n    finish() {\n        return false;\n    }\n}\nconst DefaultLeafBlocks = {\n    LinkReference(_, leaf) { return leaf.content.charCodeAt(0) == 91 /* '[' */ ? new LinkReferenceParser(leaf) : null; },\n    SetextHeading() { return new SetextHeadingParser; }\n};\nconst DefaultEndLeaf = [\n    (_, line) => isAtxHeading(line) >= 0,\n    (_, line) => isFencedCode(line) >= 0,\n    (_, line) => isBlockquote(line) >= 0,\n    (p, line) => isBulletList(line, p, true) >= 0,\n    (p, line) => isOrderedList(line, p, true) >= 0,\n    (p, line) => isHorizontalRule(line, p, true) >= 0,\n    (p, line) => isHTMLBlock(line, p, true) >= 0\n];\nconst scanLineResult = { text: \"\", end: 0 };\n/// Block-level parsing functions get access to this context object.\nclass BlockContext {\n    /// @internal\n    constructor(\n    /// The parser configuration used.\n    parser, \n    /// @internal\n    input, fragments, \n    /// @internal\n    ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.line = new Line();\n        this.atEnd = false;\n        /// @internal\n        this.dontInject = new Set;\n        this.stoppedAt = null;\n        /// The range index that absoluteLineStart points into @internal\n        this.rangeI = 0;\n        this.to = ranges[ranges.length - 1].to;\n        this.lineStart = this.absoluteLineStart = this.absoluteLineEnd = ranges[0].from;\n        this.block = CompositeBlock.create(Type.Document, 0, this.lineStart, 0, 0);\n        this.stack = [this.block];\n        this.fragments = fragments.length ? new FragmentCursor(fragments, input) : null;\n        this.readLine();\n    }\n    get parsedPos() {\n        return this.absoluteLineStart;\n    }\n    advance() {\n        if (this.stoppedAt != null && this.absoluteLineStart > this.stoppedAt)\n            return this.finish();\n        let { line } = this;\n        for (;;) {\n            while (line.depth < this.stack.length)\n                this.finishContext();\n            for (let mark of line.markers)\n                this.addNode(mark.type, mark.from, mark.to);\n            if (line.pos < line.text.length)\n                break;\n            // Empty line\n            if (!this.nextLine())\n                return this.finish();\n        }\n        if (this.fragments && this.reuseFragment(line.basePos))\n            return null;\n        start: for (;;) {\n            for (let type of this.parser.blockParsers)\n                if (type) {\n                    let result = type(this, line);\n                    if (result != false) {\n                        if (result == true)\n                            return null;\n                        line.forward();\n                        continue start;\n                    }\n                }\n            break;\n        }\n        let leaf = new LeafBlock(this.lineStart + line.pos, line.text.slice(line.pos));\n        for (let parse of this.parser.leafBlockParsers)\n            if (parse) {\n                let parser = parse(this, leaf);\n                if (parser)\n                    leaf.parsers.push(parser);\n            }\n        lines: while (this.nextLine()) {\n            if (line.pos == line.text.length)\n                break;\n            if (line.indent < line.baseIndent + 4) {\n                for (let stop of this.parser.endLeafBlock)\n                    if (stop(this, line, leaf))\n                        break lines;\n            }\n            for (let parser of leaf.parsers)\n                if (parser.nextLine(this, line, leaf))\n                    return null;\n            leaf.content += \"\\n\" + line.scrub();\n            for (let m of line.markers)\n                leaf.marks.push(m);\n        }\n        this.finishLeaf(leaf);\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    reuseFragment(start) {\n        if (!this.fragments.moveTo(this.absoluteLineStart + start, this.absoluteLineStart) ||\n            !this.fragments.matches(this.block.hash))\n            return false;\n        let taken = this.fragments.takeNodes(this);\n        if (!taken)\n            return false;\n        let withoutGaps = taken, end = this.absoluteLineStart + taken;\n        for (let i = 1; i < this.ranges.length; i++) {\n            let gapFrom = this.ranges[i - 1].to, gapTo = this.ranges[i].from;\n            if (gapFrom >= this.lineStart && gapTo < end)\n                withoutGaps -= gapTo - gapFrom;\n        }\n        this.lineStart += withoutGaps;\n        this.absoluteLineStart += taken;\n        this.moveRangeI();\n        if (this.absoluteLineStart < this.to) {\n            this.lineStart++;\n            this.absoluteLineStart++;\n            this.readLine();\n        }\n        else {\n            this.atEnd = true;\n            this.readLine();\n        }\n        return true;\n    }\n    /// The number of parent blocks surrounding the current block.\n    get depth() {\n        return this.stack.length;\n    }\n    /// Get the type of the parent block at the given depth. When no\n    /// depth is passed, return the type of the innermost parent.\n    parentType(depth = this.depth - 1) {\n        return this.parser.nodeSet.types[this.stack[depth].type];\n    }\n    /// Move to the next input line. This should only be called by\n    /// (non-composite) [block parsers](#BlockParser.parse) that consume\n    /// the line directly, or leaf block parser\n    /// [`nextLine`](#LeafBlockParser.nextLine) methods when they\n    /// consume the current line (and return true).\n    nextLine() {\n        this.lineStart += this.line.text.length;\n        if (this.absoluteLineEnd >= this.to) {\n            this.absoluteLineStart = this.absoluteLineEnd;\n            this.atEnd = true;\n            this.readLine();\n            return false;\n        }\n        else {\n            this.lineStart++;\n            this.absoluteLineStart = this.absoluteLineEnd + 1;\n            this.moveRangeI();\n            this.readLine();\n            return true;\n        }\n    }\n    moveRangeI() {\n        while (this.rangeI < this.ranges.length - 1 && this.absoluteLineStart >= this.ranges[this.rangeI].to) {\n            this.rangeI++;\n            this.absoluteLineStart = Math.max(this.absoluteLineStart, this.ranges[this.rangeI].from);\n        }\n    }\n    /// @internal\n    scanLine(start) {\n        let r = scanLineResult;\n        r.end = start;\n        if (start >= this.to) {\n            r.text = \"\";\n        }\n        else {\n            r.text = this.lineChunkAt(start);\n            r.end += r.text.length;\n            if (this.ranges.length > 1) {\n                let textOffset = this.absoluteLineStart, rangeI = this.rangeI;\n                while (this.ranges[rangeI].to < r.end) {\n                    rangeI++;\n                    let nextFrom = this.ranges[rangeI].from;\n                    let after = this.lineChunkAt(nextFrom);\n                    r.end = nextFrom + after.length;\n                    r.text = r.text.slice(0, this.ranges[rangeI - 1].to - textOffset) + after;\n                    textOffset = r.end - r.text.length;\n                }\n            }\n        }\n        return r;\n    }\n    /// @internal\n    readLine() {\n        let { line } = this, { text, end } = this.scanLine(this.absoluteLineStart);\n        this.absoluteLineEnd = end;\n        line.reset(text);\n        for (; line.depth < this.stack.length; line.depth++) {\n            let cx = this.stack[line.depth], handler = this.parser.skipContextMarkup[cx.type];\n            if (!handler)\n                throw new Error(\"Unhandled block context \" + Type[cx.type]);\n            if (!handler(cx, this, line))\n                break;\n            line.forward();\n        }\n    }\n    lineChunkAt(pos) {\n        let next = this.input.chunk(pos), text;\n        if (!this.input.lineChunks) {\n            let eol = next.indexOf(\"\\n\");\n            text = eol < 0 ? next : next.slice(0, eol);\n        }\n        else {\n            text = next == \"\\n\" ? \"\" : next;\n        }\n        return pos + text.length > this.to ? text.slice(0, this.to - pos) : text;\n    }\n    /// The end position of the previous line.\n    prevLineEnd() { return this.atEnd ? this.lineStart : this.lineStart - 1; }\n    /// @internal\n    startContext(type, start, value = 0) {\n        this.block = CompositeBlock.create(type, value, this.lineStart + start, this.block.hash, this.lineStart + this.line.text.length);\n        this.stack.push(this.block);\n    }\n    /// Start a composite block. Should only be called from [block\n    /// parser functions](#BlockParser.parse) that return null.\n    startComposite(type, start, value = 0) {\n        this.startContext(this.parser.getNodeType(type), start, value);\n    }\n    /// @internal\n    addNode(block, from, to) {\n        if (typeof block == \"number\")\n            block = new Tree(this.parser.nodeSet.types[block], none, none, (to !== null && to !== void 0 ? to : this.prevLineEnd()) - from);\n        this.block.addChild(block, from - this.block.from);\n    }\n    /// Add a block element. Can be called by [block\n    /// parsers](#BlockParser.parse).\n    addElement(elt) {\n        this.block.addChild(elt.toTree(this.parser.nodeSet), elt.from - this.block.from);\n    }\n    /// Add a block element from a [leaf parser](#LeafBlockParser). This\n    /// makes sure any extra composite block markup (such as blockquote\n    /// markers) inside the block are also added to the syntax tree.\n    addLeafElement(leaf, elt) {\n        this.addNode(this.buffer\n            .writeElements(injectMarks(elt.children, leaf.marks), -elt.from)\n            .finish(elt.type, elt.to - elt.from), elt.from);\n    }\n    /// @internal\n    finishContext() {\n        let cx = this.stack.pop();\n        let top = this.stack[this.stack.length - 1];\n        top.addChild(cx.toTree(this.parser.nodeSet), cx.from - top.from);\n        this.block = top;\n    }\n    finish() {\n        while (this.stack.length > 1)\n            this.finishContext();\n        return this.addGaps(this.block.toTree(this.parser.nodeSet, this.lineStart));\n    }\n    addGaps(tree) {\n        return this.ranges.length > 1 ? injectGaps(this.ranges, 0, tree.topNode, this.ranges[0].from, this.dontInject) : tree;\n    }\n    /// @internal\n    finishLeaf(leaf) {\n        for (let parser of leaf.parsers)\n            if (parser.finish(this, leaf))\n                return;\n        let inline = injectMarks(this.parser.parseInline(leaf.content, leaf.start), leaf.marks);\n        this.addNode(this.buffer\n            .writeElements(inline, -leaf.start)\n            .finish(Type.Paragraph, leaf.content.length), leaf.start);\n    }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n    /// @internal\n    get buffer() { return new Buffer(this.parser.nodeSet); }\n}\nfunction injectGaps(ranges, rangeI, tree, offset, dont) {\n    if (dont.has(tree.tree))\n        return tree.tree;\n    let rangeEnd = ranges[rangeI].to;\n    let children = [], positions = [], start = tree.from + offset;\n    function movePastNext(upto, inclusive) {\n        while (inclusive ? upto >= rangeEnd : upto > rangeEnd) {\n            let size = ranges[rangeI + 1].from - rangeEnd;\n            offset += size;\n            upto += size;\n            rangeI++;\n            rangeEnd = ranges[rangeI].to;\n        }\n    }\n    for (let ch = tree.firstChild; ch; ch = ch.nextSibling) {\n        movePastNext(ch.from + offset, true);\n        let from = ch.from + offset, node;\n        if (ch.to + offset > rangeEnd) {\n            node = injectGaps(ranges, rangeI, ch, offset, dont);\n            movePastNext(ch.to + offset, false);\n        }\n        else {\n            node = ch.toTree();\n        }\n        children.push(node);\n        positions.push(from - start);\n    }\n    movePastNext(tree.to + offset, false);\n    return new Tree(tree.type, children, positions, tree.to + offset - start, tree.tree ? tree.tree.propValues : undefined);\n}\n/// A Markdown parser configuration.\nclass MarkdownParser extends Parser {\n    /// @internal\n    constructor(\n    /// The parser's syntax [node\n    /// types](https://lezer.codemirror.net/docs/ref/#common.NodeSet).\n    nodeSet, \n    /// @internal\n    blockParsers, \n    /// @internal\n    leafBlockParsers, \n    /// @internal\n    blockNames, \n    /// @internal\n    endLeafBlock, \n    /// @internal\n    skipContextMarkup, \n    /// @internal\n    inlineParsers, \n    /// @internal\n    inlineNames, \n    /// @internal\n    wrappers) {\n        super();\n        this.nodeSet = nodeSet;\n        this.blockParsers = blockParsers;\n        this.leafBlockParsers = leafBlockParsers;\n        this.blockNames = blockNames;\n        this.endLeafBlock = endLeafBlock;\n        this.skipContextMarkup = skipContextMarkup;\n        this.inlineParsers = inlineParsers;\n        this.inlineNames = inlineNames;\n        this.wrappers = wrappers;\n        /// @internal\n        this.nodeTypes = Object.create(null);\n        for (let t of nodeSet.types)\n            this.nodeTypes[t.name] = t.id;\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new BlockContext(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Reconfigure the parser.\n    configure(spec) {\n        let config = resolveConfig(spec);\n        if (!config)\n            return this;\n        let { nodeSet, skipContextMarkup } = this;\n        let blockParsers = this.blockParsers.slice(), leafBlockParsers = this.leafBlockParsers.slice(), blockNames = this.blockNames.slice(), inlineParsers = this.inlineParsers.slice(), inlineNames = this.inlineNames.slice(), endLeafBlock = this.endLeafBlock.slice(), wrappers = this.wrappers;\n        if (nonEmpty(config.defineNodes)) {\n            skipContextMarkup = Object.assign({}, skipContextMarkup);\n            let nodeTypes = nodeSet.types.slice(), styles;\n            for (let s of config.defineNodes) {\n                let { name, block, composite, style } = typeof s == \"string\" ? { name: s } : s;\n                if (nodeTypes.some(t => t.name == name))\n                    continue;\n                if (composite)\n                    skipContextMarkup[nodeTypes.length] =\n                        (bl, cx, line) => composite(cx, line, bl.value);\n                let id = nodeTypes.length;\n                let group = composite ? [\"Block\", \"BlockContext\"] : !block ? undefined\n                    : id >= Type.ATXHeading1 && id <= Type.SetextHeading2 ? [\"Block\", \"LeafBlock\", \"Heading\"] : [\"Block\", \"LeafBlock\"];\n                nodeTypes.push(NodeType.define({\n                    id,\n                    name,\n                    props: group && [[NodeProp.group, group]]\n                }));\n                if (style) {\n                    if (!styles)\n                        styles = {};\n                    if (Array.isArray(style) || style instanceof Tag)\n                        styles[name] = style;\n                    else\n                        Object.assign(styles, style);\n                }\n            }\n            nodeSet = new NodeSet(nodeTypes);\n            if (styles)\n                nodeSet = nodeSet.extend(styleTags(styles));\n        }\n        if (nonEmpty(config.props))\n            nodeSet = nodeSet.extend(...config.props);\n        if (nonEmpty(config.remove)) {\n            for (let rm of config.remove) {\n                let block = this.blockNames.indexOf(rm), inline = this.inlineNames.indexOf(rm);\n                if (block > -1)\n                    blockParsers[block] = leafBlockParsers[block] = undefined;\n                if (inline > -1)\n                    inlineParsers[inline] = undefined;\n            }\n        }\n        if (nonEmpty(config.parseBlock)) {\n            for (let spec of config.parseBlock) {\n                let found = blockNames.indexOf(spec.name);\n                if (found > -1) {\n                    blockParsers[found] = spec.parse;\n                    leafBlockParsers[found] = spec.leaf;\n                }\n                else {\n                    let pos = spec.before ? findName(blockNames, spec.before)\n                        : spec.after ? findName(blockNames, spec.after) + 1 : blockNames.length - 1;\n                    blockParsers.splice(pos, 0, spec.parse);\n                    leafBlockParsers.splice(pos, 0, spec.leaf);\n                    blockNames.splice(pos, 0, spec.name);\n                }\n                if (spec.endLeaf)\n                    endLeafBlock.push(spec.endLeaf);\n            }\n        }\n        if (nonEmpty(config.parseInline)) {\n            for (let spec of config.parseInline) {\n                let found = inlineNames.indexOf(spec.name);\n                if (found > -1) {\n                    inlineParsers[found] = spec.parse;\n                }\n                else {\n                    let pos = spec.before ? findName(inlineNames, spec.before)\n                        : spec.after ? findName(inlineNames, spec.after) + 1 : inlineNames.length - 1;\n                    inlineParsers.splice(pos, 0, spec.parse);\n                    inlineNames.splice(pos, 0, spec.name);\n                }\n            }\n        }\n        if (config.wrap)\n            wrappers = wrappers.concat(config.wrap);\n        return new MarkdownParser(nodeSet, blockParsers, leafBlockParsers, blockNames, endLeafBlock, skipContextMarkup, inlineParsers, inlineNames, wrappers);\n    }\n    /// @internal\n    getNodeType(name) {\n        let found = this.nodeTypes[name];\n        if (found == null)\n            throw new RangeError(`Unknown node type '${name}'`);\n        return found;\n    }\n    /// Parse the given piece of inline text at the given offset,\n    /// returning an array of [`Element`](#Element) objects representing\n    /// the inline content.\n    parseInline(text, offset) {\n        let cx = new InlineContext(this, text, offset);\n        outer: for (let pos = offset; pos < cx.end;) {\n            let next = cx.char(pos);\n            for (let token of this.inlineParsers)\n                if (token) {\n                    let result = token(cx, next, pos);\n                    if (result >= 0) {\n                        pos = result;\n                        continue outer;\n                    }\n                }\n            pos++;\n        }\n        return cx.resolveMarkers(0);\n    }\n}\nfunction nonEmpty(a) {\n    return a != null && a.length > 0;\n}\nfunction resolveConfig(spec) {\n    if (!Array.isArray(spec))\n        return spec;\n    if (spec.length == 0)\n        return null;\n    let conf = resolveConfig(spec[0]);\n    if (spec.length == 1)\n        return conf;\n    let rest = resolveConfig(spec.slice(1));\n    if (!rest || !conf)\n        return conf || rest;\n    let conc = (a, b) => (a || none).concat(b || none);\n    let wrapA = conf.wrap, wrapB = rest.wrap;\n    return {\n        props: conc(conf.props, rest.props),\n        defineNodes: conc(conf.defineNodes, rest.defineNodes),\n        parseBlock: conc(conf.parseBlock, rest.parseBlock),\n        parseInline: conc(conf.parseInline, rest.parseInline),\n        remove: conc(conf.remove, rest.remove),\n        wrap: !wrapA ? wrapB : !wrapB ? wrapA :\n            (inner, input, fragments, ranges) => wrapA(wrapB(inner, input, fragments, ranges), input, fragments, ranges)\n    };\n}\nfunction findName(names, name) {\n    let found = names.indexOf(name);\n    if (found < 0)\n        throw new RangeError(`Position specified relative to unknown parser ${name}`);\n    return found;\n}\nlet nodeTypes = [NodeType.none];\nfor (let i = 1, name; name = Type[i]; i++) {\n    nodeTypes[i] = NodeType.define({\n        id: i,\n        name,\n        props: i >= Type.Escape ? [] : [[NodeProp.group, i in DefaultSkipMarkup ? [\"Block\", \"BlockContext\"] : [\"Block\", \"LeafBlock\"]]]\n    });\n}\nconst none = [];\nclass Buffer {\n    constructor(nodeSet) {\n        this.nodeSet = nodeSet;\n        this.content = [];\n        this.nodes = [];\n    }\n    write(type, from, to, children = 0) {\n        this.content.push(type, from, to, 4 + children * 4);\n        return this;\n    }\n    writeElements(elts, offset = 0) {\n        for (let e of elts)\n            e.writeTo(this, offset);\n        return this;\n    }\n    finish(type, length) {\n        return Tree.build({\n            buffer: this.content,\n            nodeSet: this.nodeSet,\n            reused: this.nodes,\n            topID: type,\n            length\n        });\n    }\n}\n/// Elements are used to compose syntax nodes during parsing.\nclass Element {\n    /// @internal\n    constructor(\n    /// The node's\n    /// [id](https://lezer.codemirror.net/docs/ref/#common.NodeType.id).\n    type, \n    /// The start of the node, as an offset from the start of the document.\n    from, \n    /// The end of the node.\n    to, \n    /// The node's child nodes @internal\n    children = none) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.children = children;\n    }\n    /// @internal\n    writeTo(buf, offset) {\n        let startOff = buf.content.length;\n        buf.writeElements(this.children, offset);\n        buf.content.push(this.type, this.from + offset, this.to + offset, buf.content.length + 4 - startOff);\n    }\n    /// @internal\n    toTree(nodeSet) {\n        return new Buffer(nodeSet).writeElements(this.children, -this.from).finish(this.type, this.to - this.from);\n    }\n}\nclass TreeElement {\n    constructor(tree, from) {\n        this.tree = tree;\n        this.from = from;\n    }\n    get to() { return this.from + this.tree.length; }\n    get type() { return this.tree.type.id; }\n    get children() { return none; }\n    writeTo(buf, offset) {\n        buf.nodes.push(this.tree);\n        buf.content.push(buf.nodes.length - 1, this.from + offset, this.to + offset, -1);\n    }\n    toTree() { return this.tree; }\n}\nfunction elt(type, from, to, children) {\n    return new Element(type, from, to, children);\n}\nconst EmphasisUnderscore = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst EmphasisAsterisk = { resolve: \"Emphasis\", mark: \"EmphasisMark\" };\nconst LinkStart = {}, ImageStart = {};\nclass InlineDelimiter {\n    constructor(type, from, to, side) {\n        this.type = type;\n        this.from = from;\n        this.to = to;\n        this.side = side;\n    }\n}\nconst Escapable = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\";\nlet Punctuation = /[!\"#$%&'()*+,\\-.\\/:;<=>?@\\[\\\\\\]^_`{|}~\\xA1\\u2010-\\u2027]/;\ntry {\n    Punctuation = new RegExp(\"[\\\\p{Pc}|\\\\p{Pd}|\\\\p{Pe}|\\\\p{Pf}|\\\\p{Pi}|\\\\p{Po}|\\\\p{Ps}]\", \"u\");\n}\ncatch (_) { }\nconst DefaultInline = {\n    Escape(cx, next, start) {\n        if (next != 92 /* '\\\\' */ || start == cx.end - 1)\n            return -1;\n        let escaped = cx.char(start + 1);\n        for (let i = 0; i < Escapable.length; i++)\n            if (Escapable.charCodeAt(i) == escaped)\n                return cx.append(elt(Type.Escape, start, start + 2));\n        return -1;\n    },\n    Entity(cx, next, start) {\n        if (next != 38 /* '&' */)\n            return -1;\n        let m = /^(?:#\\d+|#x[a-f\\d]+|\\w+);/i.exec(cx.slice(start + 1, start + 31));\n        return m ? cx.append(elt(Type.Entity, start, start + 1 + m[0].length)) : -1;\n    },\n    InlineCode(cx, next, start) {\n        if (next != 96 /* '`' */ || start && cx.char(start - 1) == 96)\n            return -1;\n        let pos = start + 1;\n        while (pos < cx.end && cx.char(pos) == 96)\n            pos++;\n        let size = pos - start, curSize = 0;\n        for (; pos < cx.end; pos++) {\n            if (cx.char(pos) == 96) {\n                curSize++;\n                if (curSize == size && cx.char(pos + 1) != 96)\n                    return cx.append(elt(Type.InlineCode, start, pos + 1, [\n                        elt(Type.CodeMark, start, start + size),\n                        elt(Type.CodeMark, pos + 1 - size, pos + 1)\n                    ]));\n            }\n            else {\n                curSize = 0;\n            }\n        }\n        return -1;\n    },\n    HTMLTag(cx, next, start) {\n        if (next != 60 /* '<' */ || start == cx.end - 1)\n            return -1;\n        let after = cx.slice(start + 1, cx.end);\n        let url = /^(?:[a-z][-\\w+.]+:[^\\s>]+|[a-z\\d.!#$%&'*+/=?^_`{|}~-]+@[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?(?:\\.[a-z\\d](?:[a-z\\d-]{0,61}[a-z\\d])?)*)>/i.exec(after);\n        if (url)\n            return cx.append(elt(Type.URL, start, start + 1 + url[0].length));\n        let comment = /^!--[^>](?:-[^-]|[^-])*?-->/i.exec(after);\n        if (comment)\n            return cx.append(elt(Type.Comment, start, start + 1 + comment[0].length));\n        let procInst = /^\\?[^]*?\\?>/.exec(after);\n        if (procInst)\n            return cx.append(elt(Type.ProcessingInstruction, start, start + 1 + procInst[0].length));\n        let m = /^(?:![A-Z][^]*?>|!\\[CDATA\\[[^]*?\\]\\]>|\\/\\s*[a-zA-Z][\\w-]*\\s*>|\\s*[a-zA-Z][\\w-]*(\\s+[a-zA-Z:_][\\w-.:]*(?:\\s*=\\s*(?:[^\\s\"'=<>`]+|'[^']*'|\"[^\"]*\"))?)*\\s*(\\/\\s*)?>)/.exec(after);\n        if (!m)\n            return -1;\n        return cx.append(elt(Type.HTMLTag, start, start + 1 + m[0].length));\n    },\n    Emphasis(cx, next, start) {\n        if (next != 95 && next != 42)\n            return -1;\n        let pos = start + 1;\n        while (cx.char(pos) == next)\n            pos++;\n        let before = cx.slice(start - 1, start), after = cx.slice(pos, pos + 1);\n        let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n        let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n        let leftFlanking = !sAfter && (!pAfter || sBefore || pBefore);\n        let rightFlanking = !sBefore && (!pBefore || sAfter || pAfter);\n        let canOpen = leftFlanking && (next == 42 || !rightFlanking || pBefore);\n        let canClose = rightFlanking && (next == 42 || !leftFlanking || pAfter);\n        return cx.append(new InlineDelimiter(next == 95 ? EmphasisUnderscore : EmphasisAsterisk, start, pos, (canOpen ? 1 /* Open */ : 0) | (canClose ? 2 /* Close */ : 0)));\n    },\n    HardBreak(cx, next, start) {\n        if (next == 92 /* '\\\\' */ && cx.char(start + 1) == 10 /* '\\n' */)\n            return cx.append(elt(Type.HardBreak, start, start + 2));\n        if (next == 32) {\n            let pos = start + 1;\n            while (cx.char(pos) == 32)\n                pos++;\n            if (cx.char(pos) == 10 && pos >= start + 2)\n                return cx.append(elt(Type.HardBreak, start, pos + 1));\n        }\n        return -1;\n    },\n    Link(cx, next, start) {\n        return next == 91 /* '[' */ ? cx.append(new InlineDelimiter(LinkStart, start, start + 1, 1 /* Open */)) : -1;\n    },\n    Image(cx, next, start) {\n        return next == 33 /* '!' */ && cx.char(start + 1) == 91 /* '[' */\n            ? cx.append(new InlineDelimiter(ImageStart, start, start + 2, 1 /* Open */)) : -1;\n    },\n    LinkEnd(cx, next, start) {\n        if (next != 93 /* ']' */)\n            return -1;\n        // Scanning back to the next link/image start marker\n        for (let i = cx.parts.length - 1; i >= 0; i--) {\n            let part = cx.parts[i];\n            if (part instanceof InlineDelimiter && (part.type == LinkStart || part.type == ImageStart)) {\n                // If this one has been set invalid (because it would produce\n                // a nested link) or there's no valid link here ignore both.\n                if (!part.side || cx.skipSpace(part.to) == start && !/[(\\[]/.test(cx.slice(start + 1, start + 2))) {\n                    cx.parts[i] = null;\n                    return -1;\n                }\n                // Finish the content and replace the entire range in\n                // this.parts with the link/image node.\n                let content = cx.takeContent(i);\n                let link = cx.parts[i] = finishLink(cx, content, part.type == LinkStart ? Type.Link : Type.Image, part.from, start + 1);\n                // Set any open-link markers before this link to invalid.\n                if (part.type == LinkStart)\n                    for (let j = 0; j < i; j++) {\n                        let p = cx.parts[j];\n                        if (p instanceof InlineDelimiter && p.type == LinkStart)\n                            p.side = 0;\n                    }\n                return link.to;\n            }\n        }\n        return -1;\n    }\n};\nfunction finishLink(cx, content, type, start, startPos) {\n    let { text } = cx, next = cx.char(startPos), endPos = startPos;\n    content.unshift(elt(Type.LinkMark, start, start + (type == Type.Image ? 2 : 1)));\n    content.push(elt(Type.LinkMark, startPos - 1, startPos));\n    if (next == 40 /* '(' */) {\n        let pos = cx.skipSpace(startPos + 1);\n        let dest = parseURL(text, pos - cx.offset, cx.offset), title;\n        if (dest) {\n            pos = cx.skipSpace(dest.to);\n            title = parseLinkTitle(text, pos - cx.offset, cx.offset);\n            if (title)\n                pos = cx.skipSpace(title.to);\n        }\n        if (cx.char(pos) == 41 /* ')' */) {\n            content.push(elt(Type.LinkMark, startPos, startPos + 1));\n            endPos = pos + 1;\n            if (dest)\n                content.push(dest);\n            if (title)\n                content.push(title);\n            content.push(elt(Type.LinkMark, pos, endPos));\n        }\n    }\n    else if (next == 91 /* '[' */) {\n        let label = parseLinkLabel(text, startPos - cx.offset, cx.offset, false);\n        if (label) {\n            content.push(label);\n            endPos = label.to;\n        }\n    }\n    return elt(type, start, endPos, content);\n}\n// These return `null` when falling off the end of the input, `false`\n// when parsing fails otherwise (for use in the incremental link\n// reference parser).\nfunction parseURL(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next == 60 /* '<' */) {\n        for (let pos = start + 1; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (ch == 62 /* '>' */)\n                return elt(Type.URL, start + offset, pos + 1 + offset);\n            if (ch == 60 || ch == 10 /* '<\\n' */)\n                return false;\n        }\n        return null;\n    }\n    else {\n        let depth = 0, pos = start;\n        for (let escaped = false; pos < text.length; pos++) {\n            let ch = text.charCodeAt(pos);\n            if (space(ch)) {\n                break;\n            }\n            else if (escaped) {\n                escaped = false;\n            }\n            else if (ch == 40 /* '(' */) {\n                depth++;\n            }\n            else if (ch == 41 /* ')' */) {\n                if (!depth)\n                    break;\n                depth--;\n            }\n            else if (ch == 92 /* '\\\\' */) {\n                escaped = true;\n            }\n        }\n        return pos > start ? elt(Type.URL, start + offset, pos + offset) : pos == text.length ? null : false;\n    }\n}\nfunction parseLinkTitle(text, start, offset) {\n    let next = text.charCodeAt(start);\n    if (next != 39 && next != 34 && next != 40 /* '\"\\'(' */)\n        return false;\n    let end = next == 40 ? 41 : next;\n    for (let pos = start + 1, escaped = false; pos < text.length; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == end)\n            return elt(Type.LinkTitle, start + offset, pos + 1 + offset);\n        else if (ch == 92 /* '\\\\' */)\n            escaped = true;\n    }\n    return null;\n}\nfunction parseLinkLabel(text, start, offset, requireNonWS) {\n    for (let escaped = false, pos = start + 1, end = Math.min(text.length, pos + 999); pos < end; pos++) {\n        let ch = text.charCodeAt(pos);\n        if (escaped)\n            escaped = false;\n        else if (ch == 93 /* ']' */)\n            return requireNonWS ? false : elt(Type.LinkLabel, start + offset, pos + 1 + offset);\n        else {\n            if (requireNonWS && !space(ch))\n                requireNonWS = false;\n            if (ch == 91 /* '[' */)\n                return false;\n            else if (ch == 92 /* '\\\\' */)\n                escaped = true;\n        }\n    }\n    return null;\n}\n/// Inline parsing functions get access to this context, and use it to\n/// read the content and emit syntax nodes.\nclass InlineContext {\n    /// @internal\n    constructor(\n    /// The parser that is being used.\n    parser, \n    /// The text of this inline section.\n    text, \n    /// The starting offset of the section in the document.\n    offset) {\n        this.parser = parser;\n        this.text = text;\n        this.offset = offset;\n        /// @internal\n        this.parts = [];\n    }\n    /// Get the character code at the given (document-relative)\n    /// position.\n    char(pos) { return pos >= this.end ? -1 : this.text.charCodeAt(pos - this.offset); }\n    /// The position of the end of this inline section.\n    get end() { return this.offset + this.text.length; }\n    /// Get a substring of this inline section. Again uses\n    /// document-relative positions.\n    slice(from, to) { return this.text.slice(from - this.offset, to - this.offset); }\n    /// @internal\n    append(elt) {\n        this.parts.push(elt);\n        return elt.to;\n    }\n    /// Add a [delimiter](#DelimiterType) at this given position. `open`\n    /// and `close` indicate whether this delimiter is opening, closing,\n    /// or both. Returns the end of the delimiter, for convenient\n    /// returning from [parse functions](#InlineParser.parse).\n    addDelimiter(type, from, to, open, close) {\n        return this.append(new InlineDelimiter(type, from, to, (open ? 1 /* Open */ : 0) | (close ? 2 /* Close */ : 0)));\n    }\n    /// Add an inline element. Returns the end of the element.\n    addElement(elt) {\n        return this.append(elt);\n    }\n    /// Resolve markers between this.parts.length and from, wrapping matched markers in the\n    /// appropriate node and updating the content of this.parts. @internal\n    resolveMarkers(from) {\n        // Scan forward, looking for closing tokens\n        for (let i = from; i < this.parts.length; i++) {\n            let close = this.parts[i];\n            if (!(close instanceof InlineDelimiter && close.type.resolve && (close.side & 2 /* Close */)))\n                continue;\n            let emp = close.type == EmphasisUnderscore || close.type == EmphasisAsterisk;\n            let closeSize = close.to - close.from;\n            let open, j = i - 1;\n            // Continue scanning for a matching opening token\n            for (; j >= from; j--) {\n                let part = this.parts[j];\n                if (part instanceof InlineDelimiter && (part.side & 1 /* Open */) && part.type == close.type &&\n                    // Ignore emphasis delimiters where the character count doesn't match\n                    !(emp && ((close.side & 1 /* Open */) || (part.side & 2 /* Close */)) &&\n                        (part.to - part.from + closeSize) % 3 == 0 && ((part.to - part.from) % 3 || closeSize % 3))) {\n                    open = part;\n                    break;\n                }\n            }\n            if (!open)\n                continue;\n            let type = close.type.resolve, content = [];\n            let start = open.from, end = close.to;\n            // Emphasis marker effect depends on the character count. Size consumed is minimum of the two\n            // markers.\n            if (emp) {\n                let size = Math.min(2, open.to - open.from, closeSize);\n                start = open.to - size;\n                end = close.from + size;\n                type = size == 1 ? \"Emphasis\" : \"StrongEmphasis\";\n            }\n            // Move the covered region into content, optionally adding marker nodes\n            if (open.type.mark)\n                content.push(this.elt(open.type.mark, start, open.to));\n            for (let k = j + 1; k < i; k++) {\n                if (this.parts[k] instanceof Element)\n                    content.push(this.parts[k]);\n                this.parts[k] = null;\n            }\n            if (close.type.mark)\n                content.push(this.elt(close.type.mark, close.from, end));\n            let element = this.elt(type, start, end, content);\n            // If there are leftover emphasis marker characters, shrink the close/open markers. Otherwise, clear them.\n            this.parts[j] = emp && open.from != start ? new InlineDelimiter(open.type, open.from, start, open.side) : null;\n            let keep = this.parts[i] = emp && close.to != end ? new InlineDelimiter(close.type, end, close.to, close.side) : null;\n            // Insert the new element in this.parts\n            if (keep)\n                this.parts.splice(i, 0, element);\n            else\n                this.parts[i] = element;\n        }\n        // Collect the elements remaining in this.parts into an array.\n        let result = [];\n        for (let i = from; i < this.parts.length; i++) {\n            let part = this.parts[i];\n            if (part instanceof Element)\n                result.push(part);\n        }\n        return result;\n    }\n    /// Find an opening delimiter of the given type. Returns `null` if\n    /// no delimiter is found, or an index that can be passed to\n    /// [`takeContent`](#InlineContext.takeContent) otherwise.\n    findOpeningDelimiter(type) {\n        for (let i = this.parts.length - 1; i >= 0; i--) {\n            let part = this.parts[i];\n            if (part instanceof InlineDelimiter && part.type == type)\n                return i;\n        }\n        return null;\n    }\n    /// Remove all inline elements and delimiters starting from the\n    /// given index (which you should get from\n    /// [`findOpeningDelimiter`](#InlineContext.findOpeningDelimiter),\n    /// resolve delimiters inside of them, and return them as an array\n    /// of elements.\n    takeContent(startIndex) {\n        let content = this.resolveMarkers(startIndex);\n        this.parts.length = startIndex;\n        return content;\n    }\n    /// Skip space after the given (document) position, returning either\n    /// the position of the next non-space character or the end of the\n    /// section.\n    skipSpace(from) { return skipSpace(this.text, from - this.offset) + this.offset; }\n    elt(type, from, to, children) {\n        if (typeof type == \"string\")\n            return elt(this.parser.getNodeType(type), from, to, children);\n        return new TreeElement(type, from);\n    }\n}\nfunction injectMarks(elements, marks) {\n    if (!marks.length)\n        return elements;\n    if (!elements.length)\n        return marks;\n    let elts = elements.slice(), eI = 0;\n    for (let mark of marks) {\n        while (eI < elts.length && elts[eI].to < mark.to)\n            eI++;\n        if (eI < elts.length && elts[eI].from < mark.from) {\n            let e = elts[eI];\n            if (e instanceof Element)\n                elts[eI] = new Element(e.type, e.from, e.to, injectMarks(e.children, [mark]));\n        }\n        else {\n            elts.splice(eI++, 0, mark);\n        }\n    }\n    return elts;\n}\n// These are blocks that can span blank lines, and should thus only be\n// reused if their next sibling is also being reused.\nconst NotLast = [Type.CodeBlock, Type.ListItem, Type.OrderedList, Type.BulletList];\nclass FragmentCursor {\n    constructor(fragments, input) {\n        this.fragments = fragments;\n        this.input = input;\n        // Index into fragment array\n        this.i = 0;\n        // Active fragment\n        this.fragment = null;\n        this.fragmentEnd = -1;\n        // Cursor into the current fragment, if any. When `moveTo` returns\n        // true, this points at the first block after `pos`.\n        this.cursor = null;\n        if (fragments.length)\n            this.fragment = fragments[this.i++];\n    }\n    nextFragment() {\n        this.fragment = this.i < this.fragments.length ? this.fragments[this.i++] : null;\n        this.cursor = null;\n        this.fragmentEnd = -1;\n    }\n    moveTo(pos, lineStart) {\n        while (this.fragment && this.fragment.to <= pos)\n            this.nextFragment();\n        if (!this.fragment || this.fragment.from > (pos ? pos - 1 : 0))\n            return false;\n        if (this.fragmentEnd < 0) {\n            let end = this.fragment.to;\n            while (end > 0 && this.input.read(end - 1, end) != \"\\n\")\n                end--;\n            this.fragmentEnd = end ? end - 1 : 0;\n        }\n        let c = this.cursor;\n        if (!c) {\n            c = this.cursor = this.fragment.tree.cursor();\n            c.firstChild();\n        }\n        let rPos = pos + this.fragment.offset;\n        while (c.to <= rPos)\n            if (!c.parent())\n                return false;\n        for (;;) {\n            if (c.from >= rPos)\n                return this.fragment.from <= lineStart;\n            if (!c.childAfter(rPos))\n                return false;\n        }\n    }\n    matches(hash) {\n        let tree = this.cursor.tree;\n        return tree && tree.prop(NodeProp.contextHash) == hash;\n    }\n    takeNodes(cx) {\n        let cur = this.cursor, off = this.fragment.offset, fragEnd = this.fragmentEnd - (this.fragment.openEnd ? 1 : 0);\n        let start = cx.absoluteLineStart, end = start, blockI = cx.block.children.length;\n        let prevEnd = end, prevI = blockI;\n        for (;;) {\n            if (cur.to - off > fragEnd) {\n                if (cur.type.isAnonymous && cur.firstChild())\n                    continue;\n                break;\n            }\n            cx.dontInject.add(cur.tree);\n            cx.addNode(cur.tree, cur.from - off);\n            // Taken content must always end in a block, because incremental\n            // parsing happens on block boundaries. Never stop directly\n            // after an indented code block, since those can continue after\n            // any number of blank lines.\n            if (cur.type.is(\"Block\")) {\n                if (NotLast.indexOf(cur.type.id) < 0) {\n                    end = cur.to - off;\n                    blockI = cx.block.children.length;\n                }\n                else {\n                    end = prevEnd;\n                    blockI = prevI;\n                    prevEnd = cur.to - off;\n                    prevI = cx.block.children.length;\n                }\n            }\n            if (!cur.nextSibling())\n                break;\n        }\n        while (cx.block.children.length > blockI) {\n            cx.block.children.pop();\n            cx.block.positions.pop();\n        }\n        return end - start;\n    }\n}\nconst markdownHighlighting = styleTags({\n    \"Blockquote/...\": tags.quote,\n    HorizontalRule: tags.contentSeparator,\n    \"ATXHeading1/... SetextHeading1/...\": tags.heading1,\n    \"ATXHeading2/... SetextHeading2/...\": tags.heading2,\n    \"ATXHeading3/...\": tags.heading3,\n    \"ATXHeading4/...\": tags.heading4,\n    \"ATXHeading5/...\": tags.heading5,\n    \"ATXHeading6/...\": tags.heading6,\n    \"Comment CommentBlock\": tags.comment,\n    Escape: tags.escape,\n    Entity: tags.character,\n    \"Emphasis/...\": tags.emphasis,\n    \"StrongEmphasis/...\": tags.strong,\n    \"Link/... Image/...\": tags.link,\n    \"OrderedList/... BulletList/...\": tags.list,\n    \"BlockQuote/...\": tags.quote,\n    \"InlineCode CodeText\": tags.monospace,\n    URL: tags.url,\n    \"HeaderMark HardBreak QuoteMark ListMark LinkMark EmphasisMark CodeMark\": tags.processingInstruction,\n    \"CodeInfo LinkLabel\": tags.labelName,\n    LinkTitle: tags.string,\n    Paragraph: tags.content\n});\n/// The default CommonMark parser.\nconst parser = new MarkdownParser(new NodeSet(nodeTypes).extend(markdownHighlighting), Object.keys(DefaultBlockParsers).map(n => DefaultBlockParsers[n]), Object.keys(DefaultBlockParsers).map(n => DefaultLeafBlocks[n]), Object.keys(DefaultBlockParsers), DefaultEndLeaf, DefaultSkipMarkup, Object.keys(DefaultInline).map(n => DefaultInline[n]), Object.keys(DefaultInline), []);\n\nfunction leftOverSpace(node, from, to) {\n    let ranges = [];\n    for (let n = node.firstChild, pos = from;; n = n.nextSibling) {\n        let nextPos = n ? n.from : to;\n        if (nextPos > pos)\n            ranges.push({ from: pos, to: nextPos });\n        if (!n)\n            break;\n        pos = n.to;\n    }\n    return ranges;\n}\n/// Create a Markdown extension to enable nested parsing on code\n/// blocks and/or embedded HTML.\nfunction parseCode(config) {\n    let { codeParser, htmlParser } = config;\n    let wrap = parseMixed((node, input) => {\n        let id = node.type.id;\n        if (codeParser && (id == Type.CodeBlock || id == Type.FencedCode)) {\n            let info = \"\";\n            if (id == Type.FencedCode) {\n                let infoNode = node.node.getChild(Type.CodeInfo);\n                if (infoNode)\n                    info = input.read(infoNode.from, infoNode.to);\n            }\n            let parser = codeParser(info);\n            if (parser)\n                return { parser, overlay: node => node.type.id == Type.CodeText };\n        }\n        else if (htmlParser && (id == Type.HTMLBlock || id == Type.HTMLTag)) {\n            return { parser: htmlParser, overlay: leftOverSpace(node.node, node.from, node.to) };\n        }\n        return null;\n    });\n    return { wrap };\n}\n\nconst StrikethroughDelim = { resolve: \"Strikethrough\", mark: \"StrikethroughMark\" };\n/// An extension that implements\n/// [GFM-style](https://github.github.com/gfm/#strikethrough-extension-)\n/// Strikethrough syntax using `~~` delimiters.\nconst Strikethrough = {\n    defineNodes: [{\n            name: \"Strikethrough\",\n            style: { \"Strikethrough/...\": tags.strikethrough }\n        }, {\n            name: \"StrikethroughMark\",\n            style: tags.processingInstruction\n        }],\n    parseInline: [{\n            name: \"Strikethrough\",\n            parse(cx, next, pos) {\n                if (next != 126 /* '~' */ || cx.char(pos + 1) != 126 || cx.char(pos + 2) == 126)\n                    return -1;\n                let before = cx.slice(pos - 1, pos), after = cx.slice(pos + 2, pos + 3);\n                let sBefore = /\\s|^$/.test(before), sAfter = /\\s|^$/.test(after);\n                let pBefore = Punctuation.test(before), pAfter = Punctuation.test(after);\n                return cx.addDelimiter(StrikethroughDelim, pos, pos + 2, !sAfter && (!pAfter || sBefore || pBefore), !sBefore && (!pBefore || sAfter || pAfter));\n            },\n            after: \"Emphasis\"\n        }]\n};\nfunction parseRow(cx, line, startI = 0, elts, offset = 0) {\n    let count = 0, first = true, cellStart = -1, cellEnd = -1, esc = false;\n    let parseCell = () => {\n        elts.push(cx.elt(\"TableCell\", offset + cellStart, offset + cellEnd, cx.parser.parseInline(line.slice(cellStart, cellEnd), offset + cellStart)));\n    };\n    for (let i = startI; i < line.length; i++) {\n        let next = line.charCodeAt(i);\n        if (next == 124 /* '|' */ && !esc) {\n            if (!first || cellStart > -1)\n                count++;\n            first = false;\n            if (elts) {\n                if (cellStart > -1)\n                    parseCell();\n                elts.push(cx.elt(\"TableDelimiter\", i + offset, i + offset + 1));\n            }\n            cellStart = cellEnd = -1;\n        }\n        else if (esc || next != 32 && next != 9) {\n            if (cellStart < 0)\n                cellStart = i;\n            cellEnd = i + 1;\n        }\n        esc = !esc && next == 92;\n    }\n    if (cellStart > -1) {\n        count++;\n        if (elts)\n            parseCell();\n    }\n    return count;\n}\nfunction hasPipe(str, start) {\n    for (let i = start; i < str.length; i++) {\n        let next = str.charCodeAt(i);\n        if (next == 124 /* '|' */)\n            return true;\n        if (next == 92 /* '\\\\' */)\n            i++;\n    }\n    return false;\n}\nconst delimiterLine = /^\\|?(\\s*:?-+:?\\s*\\|)+(\\s*:?-+:?\\s*)?$/;\nclass TableParser {\n    constructor() {\n        // Null means we haven't seen the second line yet, false means this\n        // isn't a table, and an array means this is a table and we've\n        // parsed the given rows so far.\n        this.rows = null;\n    }\n    nextLine(cx, line, leaf) {\n        if (this.rows == null) { // Second line\n            this.rows = false;\n            let lineText;\n            if ((line.next == 45 || line.next == 58 || line.next == 124 /* '-:|' */) &&\n                delimiterLine.test(lineText = line.text.slice(line.pos))) {\n                let firstRow = [], firstCount = parseRow(cx, leaf.content, 0, firstRow, leaf.start);\n                if (firstCount == parseRow(cx, lineText, line.pos))\n                    this.rows = [cx.elt(\"TableHeader\", leaf.start, leaf.start + leaf.content.length, firstRow),\n                        cx.elt(\"TableDelimiter\", cx.lineStart + line.pos, cx.lineStart + line.text.length)];\n            }\n        }\n        else if (this.rows) { // Line after the second\n            let content = [];\n            parseRow(cx, line.text, line.pos, content, cx.lineStart);\n            this.rows.push(cx.elt(\"TableRow\", cx.lineStart + line.pos, cx.lineStart + line.text.length, content));\n        }\n        return false;\n    }\n    finish(cx, leaf) {\n        if (!this.rows)\n            return false;\n        cx.addLeafElement(leaf, cx.elt(\"Table\", leaf.start, leaf.start + leaf.content.length, this.rows));\n        return true;\n    }\n}\n/// This extension provides\n/// [GFM-style](https://github.github.com/gfm/#tables-extension-)\n/// tables, using syntax like this:\n///\n/// ```\n/// | head 1 | head 2 |\n/// | ---    | ---    |\n/// | cell 1 | cell 2 |\n/// ```\nconst Table = {\n    defineNodes: [\n        { name: \"Table\", block: true },\n        { name: \"TableHeader\", style: { \"TableHeader/...\": tags.heading } },\n        \"TableRow\",\n        { name: \"TableCell\", style: tags.content },\n        { name: \"TableDelimiter\", style: tags.processingInstruction },\n    ],\n    parseBlock: [{\n            name: \"Table\",\n            leaf(_, leaf) { return hasPipe(leaf.content, 0) ? new TableParser : null; },\n            endLeaf(cx, line, leaf) {\n                if (leaf.parsers.some(p => p instanceof TableParser) || !hasPipe(line.text, line.basePos))\n                    return false;\n                let next = cx.scanLine(cx.absoluteLineEnd + 1).text;\n                return delimiterLine.test(next) && parseRow(cx, line.text, line.basePos) == parseRow(cx, next, line.basePos);\n            },\n            before: \"SetextHeading\"\n        }]\n};\nclass TaskParser {\n    nextLine() { return false; }\n    finish(cx, leaf) {\n        cx.addLeafElement(leaf, cx.elt(\"Task\", leaf.start, leaf.start + leaf.content.length, [\n            cx.elt(\"TaskMarker\", leaf.start, leaf.start + 3),\n            ...cx.parser.parseInline(leaf.content.slice(3), leaf.start + 3)\n        ]));\n        return true;\n    }\n}\n/// Extension providing\n/// [GFM-style](https://github.github.com/gfm/#task-list-items-extension-)\n/// task list items, where list items can be prefixed with `[ ]` or\n/// `[x]` to add a checkbox.\nconst TaskList = {\n    defineNodes: [\n        { name: \"Task\", block: true, style: tags.list },\n        { name: \"TaskMarker\", style: tags.atom }\n    ],\n    parseBlock: [{\n            name: \"TaskList\",\n            leaf(cx, leaf) {\n                return /^\\[[ xX]\\]/.test(leaf.content) && cx.parentType().name == \"ListItem\" ? new TaskParser : null;\n            },\n            after: \"SetextHeading\"\n        }]\n};\n/// Extension bundle containing [`Table`](#Table),\n/// [`TaskList`](#TaskList) and [`Strikethrough`](#Strikethrough).\nconst GFM = [Table, TaskList, Strikethrough];\nfunction parseSubSuper(ch, node, mark) {\n    return (cx, next, pos) => {\n        if (next != ch || cx.char(pos + 1) == ch)\n            return -1;\n        let elts = [cx.elt(mark, pos, pos + 1)];\n        for (let i = pos + 1; i < cx.end; i++) {\n            let next = cx.char(i);\n            if (next == ch)\n                return cx.addElement(cx.elt(node, pos, i + 1, elts.concat(cx.elt(mark, i, i + 1))));\n            if (next == 92 /* '\\\\' */)\n                elts.push(cx.elt(\"Escape\", i, i++ + 2));\n            if (space(next))\n                break;\n        }\n        return -1;\n    };\n}\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// superscript using `^` markers.\nconst Superscript = {\n    defineNodes: [\n        { name: \"Superscript\", style: tags.special(tags.content) },\n        { name: \"SuperscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Superscript\",\n            parse: parseSubSuper(94 /* '^' */, \"Superscript\", \"SuperscriptMark\")\n        }]\n};\n/// Extension providing\n/// [Pandoc-style](https://pandoc.org/MANUAL.html#superscripts-and-subscripts)\n/// subscript using `~` markers.\nconst Subscript = {\n    defineNodes: [\n        { name: \"Subscript\", style: tags.special(tags.content) },\n        { name: \"SubscriptMark\", style: tags.processingInstruction }\n    ],\n    parseInline: [{\n            name: \"Subscript\",\n            parse: parseSubSuper(126 /* '~' */, \"Subscript\", \"SubscriptMark\")\n        }]\n};\n/// Extension that parses two colons with only letters, underscores,\n/// and numbers between them as `Emoji` nodes.\nconst Emoji = {\n    defineNodes: [{ name: \"Emoji\", style: tags.character }],\n    parseInline: [{\n            name: \"Emoji\",\n            parse(cx, next, pos) {\n                let match;\n                if (next != 58 /* ':' */ || !(match = /^[a-zA-Z_0-9]+:/.exec(cx.slice(pos + 1, cx.end))))\n                    return -1;\n                return cx.addElement(cx.elt(\"Emoji\", pos, pos + 1 + match[0].length));\n            }\n        }]\n};\n\nexport { BlockContext, Element, Emoji, GFM, InlineContext, LeafBlock, Line, MarkdownParser, Strikethrough, Subscript, Superscript, Table, TaskList, parseCode, parser };\n"],
  "mappings": "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",
  "names": ["EditorSelection", "countColumn", "Prec", "EditorState", "keymap", "defineLanguageFacet", "foldNodeProp", "indentNodeProp", "languageDataProp", "foldService", "syntaxTree", "Language", "LanguageDescription", "ParseContext", "indentUnit", "LanguageSupport", "CompletionContext", "NodeType", "NodeProp", "NodeSet", "Tree", "Parser", "parseMixed", "styleTags", "tags", "Tag", "CompositeBlock", "_CompositeBlock", "type", "value", "from", "hash", "end", "children", "positions", "parentHash", "child", "pos", "nodeSet", "last", "length", "Type", "LeafBlock", "start", "content", "Line", "newPos", "skipSpace", "text", "to", "indent", "elt", "i", "goal", "result", "skipForList", "bl", "cx", "line", "size", "isOrderedList", "isBulletList", "isHorizontalRule", "DefaultSkipMarkup", "space", "_cx", "ch", "skipSpaceBack", "isFencedCode", "isBlockquote", "breaking", "count", "isSetextUnderline", "inList", "next", "isAtxHeading", "EmptyLine", "CommentEnd", "ProcessingEnd", "HTMLBlockStyle", "isHTMLBlock", "rest", "e", "getListIndent", "indentAfter", "indented", "addCodeText", "marks", "DefaultBlockParsers", "base", "pendingMarks", "m", "codeStart", "fenceEnd", "len", "infoFrom", "infoTo", "first", "textStart", "textEnd", "newBase", "off", "endOfSpace", "after", "buf", "node", "trailing", "nodeType", "LinkReferenceParser", "leaf", "finish", "parseLinkLabel", "parseURL", "skip", "title", "parseLinkTitle", "titleEnd", "lineEnd", "SetextHeadingParser", "underline", "underlineMark", "DefaultLeafBlocks", "_", "DefaultEndLeaf", "p", "scanLineResult", "BlockContext", "parser", "input", "fragments", "ranges", "FragmentCursor", "mark", "parse", "lines", "stop", "taken", "withoutGaps", "gapFrom", "gapTo", "depth", "textOffset", "rangeI", "nextFrom", "handler", "eol", "block", "none", "injectMarks", "top", "tree", "injectGaps", "inline", "TreeElement", "Buffer", "offset", "dont", "rangeEnd", "movePastNext", "upto", "inclusive", "MarkdownParser", "_MarkdownParser", "blockParsers", "leafBlockParsers", "blockNames", "endLeafBlock", "skipContextMarkup", "inlineParsers", "inlineNames", "wrappers", "t", "w", "spec", "config", "resolveConfig", "nonEmpty", "nodeTypes", "styles", "s", "name", "composite", "style", "id", "group", "rm", "found", "findName", "InlineContext", "outer", "token", "a", "conf", "conc", "b", "wrapA", "wrapB", "inner", "names", "elts", "Element", "startOff", "EmphasisUnderscore", "EmphasisAsterisk", "LinkStart", "ImageStart", "InlineDelimiter", "side", "Escapable", "Punctuation", "DefaultInline", "escaped", "curSize", "url", "comment", "procInst", "before", "pBefore", "pAfter", "sBefore", "sAfter", "leftFlanking", "rightFlanking", "canOpen", "canClose", "part", "link", "finishLink", "j", "startPos", "endPos", "dest", "label", "requireNonWS", "open", "close", "emp", "closeSize", "element", "startIndex", "elements", "eI", "NotLast", "lineStart", "c", "rPos", "cur", "fragEnd", "blockI", "prevEnd", "prevI", "markdownHighlighting", "n", "leftOverSpace", "nextPos", "parseCode", "codeParser", "htmlParser", "info", "infoNode", "StrikethroughDelim", "Strikethrough", "parseRow", "startI", "cellStart", "cellEnd", "esc", "parseCell", "hasPipe", "str", "delimiterLine", "TableParser", "lineText", "firstRow", "Table", "TaskParser", "TaskList", "GFM", "parseSubSuper", "Superscript", "Subscript", "Emoji", "match", "html", "htmlCompletionSource", "NodeProp", "data", "defineLanguageFacet", "headingProp", "commonmark", "parser", "foldNodeProp", "type", "isHeading", "isList", "tree", "state", "indentNodeProp", "languageDataProp", "match", "findSectionEnd", "headerNode", "level", "last", "next", "heading", "headerIndent", "foldService", "start", "end", "node", "syntaxTree", "upto", "mkLang", "Language", "commonmarkLanguage", "extended", "GFM", "Subscript", "Superscript", "Emoji", "markdownLanguage", "getCodeParser", "languages", "defaultLanguage", "info", "found", "LanguageDescription", "ParseContext", "Context", "from", "to", "spaceBefore", "spaceAfter", "item", "maxWidth", "trailing", "result", "i", "doc", "add", "number", "itemNumber", "getContext", "nodes", "context", "cur", "line", "startPos", "after", "len", "renumberList", "changes", "offset", "prev", "m", "normalizeIndent", "content", "blank", "indentUnit", "col", "countColumn", "space", "insertNewlineContinueMarkup", "dispatch", "dont", "range", "pos", "inner", "emptyLine", "first", "second", "delTo", "insert", "EditorSelection", "blankLine", "prevLine", "quoted", "continued", "e", "nonTightList", "isMark", "line1", "line2", "empty", "contextNodeForDelete", "scan", "deleteMarkupBackward", "spaceEnd", "markdownKeymap", "htmlNoMatch", "markdown", "config", "codeLanguages", "defaultCodeLanguage", "addKeymap", "completeHTMLTags", "htmlTagLanguage", "MarkdownParser", "extensions", "support", "defaultCode", "LanguageSupport", "codeParser", "parseCode", "Prec", "keymap", "lang", "htmlTagCompletion", "htmlTagCompletions", "_tagCompletions", "CompletionContext", "EditorState"]
}
