{
  "version": 3,
  "sources": ["../../src/livecodes/editor/monaco/languages/monaco-lang-imba.ts"],
  "sourcesContent": ["/* eslint-disable */\n// @ts-nocheck\n\n// from https://github.com/imba/imba.io/blob/master/scripts/lexer/grammar.imba\n// and https://github.com/imba/imba.io/blob/master/src/repl/languages/imba.imba\n\nfunction iter$__(a) {\n  let v;\n  return a ? ((v = a.toIterable) ? v.call(a) : a) : [];\n}\n\n/*body*/\nconst eolpop = [/^/, { token: '@rematch', next: '@pop' }];\nconst repop = { token: '@rematch', next: '@pop' };\nconst toodeep = { token: 'white.indent', next: '@>illegal_indent' };\n\nconst EOF = '\u00A7EOF\u00A7';\n\nfunction regexify(array, pattern = '#') {\n  if (typeof array == 'string') {\n    array = array.split(' ');\n  }\n\n  let items = array.slice().sort(function (_0, _1) {\n    return _1.length - _0.length;\n  });\n  items = items.map(function (item) {\n    let escaped = item.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&');\n    return pattern.replace('#', escaped);\n  });\n  return new RegExp('(?:' + items.join('|') + ')');\n}\n\nfunction denter(indent, outdent, stay, o = {}) {\n  var v$\u03C6;\n\n  if (indent == null) {\n    indent = toodeep;\n  } else if (indent == 1) {\n    indent = { next: '@>' };\n  } else if (indent == 2) {\n    indent = { next: '@>_indent&-_indent' };\n  } else if (typeof indent == 'string') {\n    indent = { next: indent };\n  }\n\n  if (outdent == -1) {\n    outdent = repop;\n  }\n  if (stay == -1) {\n    stay = repop;\n  } else if (stay == 0) {\n    o.comment == null ? (o.comment = true) : o.comment;\n\n    stay = {};\n  }\n\n  indent = Object.assign({ token: 'white.tabs' }, indent || {});\n  stay = Object.assign({ token: 'white.tabs' }, stay || {});\n  outdent = Object.assign({ token: '@rematch', next: '@pop' }, outdent || {});\n\n  let cases = {\n    '$1==$S2\\t': indent,\n    '$1==$S2': {\n      cases: { '$1==$S6': stay, '@default': { token: '@rematch', switchTo: '@*$1' } },\n    },\n    '@default': outdent,\n  };\n  v$\u03C6 = 0;\n  for (let k of ['next', 'switchTo']) {\n    let v = v$\u03C6++;\n    if (indent[k] && indent[k].indexOf('*') == -1) {\n      indent[k] += '*$1';\n    }\n  }\n\n  // for own k,v of cases\n  let rule = [/^(\\t*)(?=[^ \\t\\n])/, { cases: cases }];\n  if (o.comment) {\n    let clones = {};\n    for (let i\u03C6 = 0, keys\u03C6 = Object.keys(cases), l\u03C6 = keys\u03C6.length, k, v; i\u03C6 < l\u03C6; i\u03C6++) {\n      k = keys\u03C6[i\u03C6];\n      v = cases[k];\n      let clone = Object.assign({}, v);\n      if (!clone.next && !clone.switchTo) {\n        clone.next = '@>_comment';\n      }\n      clones[k] = clone;\n    }\n    return [[/^(\\t*)(?=#\\s|#$)/, { cases: clones }], rule];\n  }\n\n  return rule;\n}\n\nconst states = {\n  root: [\n    [/^@comment/, 'comment', '@>_comment'], // want to push this state _ before the token\n    [\n      /^(\\t+)(?=[^\\t\\n])/,\n      {\n        cases: {\n          '$1==$S2\\t': { token: 'white.indent', next: '@>_indent*$1' },\n          '@default': 'white.indent',\n        },\n      },\n    ],\n    'block_',\n  ],\n\n  _comment: [\n    [/^([\\t\\s\\n]*)$/, 'comment'],\n    [\n      /^(\\t*)([\\S\\s]*)/,\n      {\n        cases: {\n          // same or deeper indentation\n          '$1~$S2\\t*': { token: 'comment' },\n          '@default': { token: '@rematch', next: '@pop' },\n        },\n      },\n    ],\n    [/[\\S\\s]+/, 'comment'],\n  ],\n\n  illegal_indent: [denter()],\n\n  identifier_: [\n    [/\\$\\w+\\$/, 'identifier.env'],\n    [/\\$\\d+/, 'identifier.special'],\n    [/\\#+@id/, 'identifier.symbol'],\n    [/\\\u00B6@id/, 'ivar'], // imba1\n    [\n      /@id\\!?/,\n      {\n        cases: {\n          this: 'this',\n          self: 'self',\n          '@keywords': 'keyword.$#',\n          '$0~[A-Z].*': 'identifier.uppercase.$F',\n          '@default': 'identifier.$F',\n        },\n      },\n    ],\n  ],\n\n  block_: [\n    // 'common_'\n    [/^(\\t+)(?=[\\r\\n]|$)/, 'white.tabs'],\n    'class_',\n    'tagclass_',\n    'var_',\n    'func_',\n    'import_',\n    'export_',\n    'flow_',\n    'for_',\n    'try_',\n    'catch_',\n    'while_',\n    'css_',\n    'tag_',\n    'do_',\n    'block_comment_',\n    'expr_',\n    [/[ ]+/, 'white'],\n    'common_',\n  ],\n\n  indentable_: [\n    [/^[ ]+/, 'white'],\n    denter('@>_paren_indent&-_indent', null, null),\n    [/^(\\t+)(?=[\\r\\n]|$)/, 'white.tabs'],\n    'whitespace',\n  ],\n\n  _indent: [denter(2, -1, 0), 'block_'],\n\n  _paren_indent: [denter(2, -1, 0), 'block_', [/\\)|\\}|\\]/, '@rematch', '@pop']],\n\n  block: [denter('@>', -1, 0), 'block_'],\n  bool_: [[/(true|false|yes|no|undefined|null)(?![\\:\\-\\w\\.\\_])/, 'boolean']],\n\n  op_: [\n    [/\\s+\\:\\s+/, 'operator.ternary'],\n    // [/\\s*(\\=)/]\n    [\n      /(@unspaced_ops)/,\n      {\n        cases: {\n          '@spread': 'operator.spread',\n          '@access': 'operator.access',\n          '@default': 'operator',\n        },\n      },\n    ],\n    [/\\/(?!\\/)/, 'operator.math'],\n    [/\\&(?=[,\\)])/, 'operator.special.blockparam'],\n    [\n      /(\\s*)(@symbols)(\\s*)/,\n      {\n        cases: {\n          '$2@assignments': 'operator.assign',\n          '$2@math': 'operator.math',\n          '$2@operators': 'operator',\n          '$2@logic': 'operator.logic',\n          '$2@access': 'operator.access',\n          '@default': 'delimiter',\n        },\n      },\n    ],\n    [/\\&\\b/, 'operator'],\n  ],\n\n  keyword_: [\n    [/new@B/, 'keyword.new'],\n    [/isa@B/, 'keyword.isa'],\n    [/is@B/, 'keyword.is'],\n    [/(switch|when|throw|continue|break|then|await|typeof|by)@B/, 'keyword.$1'],\n    [/delete@B/, 'keyword.delete'],\n    [/and@B|or@B/, 'operator.flow'],\n  ],\n\n  return_: [[/return@B/, 'keyword.new']],\n\n  primitive_: ['string_', 'number_', 'regexp_', 'bool_'],\n\n  value_: [\n    'primitive_',\n    'keyword_',\n    'implicit_call_',\n    'parens_', // call will always capture?\n    'key_',\n    'access_',\n    'identifier_',\n    'array_',\n    'object_',\n  ],\n\n  expr_: ['comment_', 'inline_var_', 'return_', 'value_', 'tag_', 'op_', 'type_', 'spread_'],\n\n  attr_expr_: [\n    'primitive_',\n    'parens_',\n    'access_',\n    'identifier_',\n    'array_',\n    'object_',\n    'tag_',\n    'op_',\n  ],\n\n  access_: [\n    [\n      /(\\.\\.?)(@propid\\!?)/,\n      {\n        cases: {\n          '$2~[A-Z].*': ['operator.access', 'accessor.uppercase'],\n          '$2~#.*': ['operator.access', 'accessor.symbol'],\n          '@default': ['operator.access', 'accessor'],\n        },\n      },\n    ],\n  ],\n\n  call_: [[/\\(/, '(', '@call_body']],\n\n  key_: [\n    [/(\\#+@id)(\\:\\s*)/, ['key.symbol', 'operator.assign.key-value']],\n    [\n      /(@propid)(\\:\\s*)/,\n      {\n        cases: {\n          '@default': ['key', 'operator.assign.key-value'],\n        },\n      },\n    ],\n  ],\n\n  implicit_call_: [\n    [\n      /(\\.\\.?)(@propid)@implicitCall/,\n      {\n        cases: {\n          '$2~[A-Z].*': ['operator.access', 'accessor.uppercase', '@implicit_call_body'],\n          '@default': ['operator.access', 'accessor', '@implicit_call_body'],\n        },\n      },\n    ],\n    [\n      /(@propid)@implicitCall/,\n      {\n        cases: {\n          '$2~[A-Z].*': ['identifier.uppercase', '@implicit_call_body'],\n          '@default': ['identifier', '@implicit_call_body'],\n        },\n      },\n    ],\n  ],\n\n  implicit_call_body: [eolpop, [/\\)|\\}|\\]|\\>/, '@rematch', '@pop'], 'arglist_', 'whitespace'],\n\n  arglist_: ['do_', 'expr_', [/\\s*\\,\\s*/, 'delimiter.comma']],\n\n  params_: [\n    [/\\[/, 'array.[', '@array_var_body=decl-param'],\n    [/\\{/, 'object.{', '@object_body=decl-param'],\n    [/(@variable)/, 'identifier.decl-param'],\n    // [/(\\s*\\=\\s*)(?=(for|while|until|if|unless)\\s)/,'operator','@pop']\n    'spread_',\n    'type_',\n    [/\\s*\\=\\s*/, 'operator', '@var_value='],\n    [/\\s*\\,\\s*/, 'separator'],\n  ],\n\n  object_: [[/\\{/, 'object.{', '@object_body']],\n\n  parens_: [[/\\(/, 'parens.(', '@parens_body']],\n\n  parens_body: [[/\\)/, ')', '@pop'], 'indentable_', 'arglist_'],\n\n  array_: [[/\\[/, 'array.[', '@array_body']],\n\n  array_body: [\n    [/\\]@implicitCall/, { token: ']', switchTo: '@implicit_call_body=' }],\n    [/\\]/, ']', '@pop'],\n    [/\\)|\\}/, 'invalid'],\n    'indentable_',\n    'expr_',\n    [',', 'delimiter'],\n  ],\n\n  object_body: [\n    [/\\}/, '}', '@pop'],\n    [/(@id)(\\s*:\\s*)/, ['key', 'operator.assign.key-value', '@object_value']],\n    [/(@id)/, 'identifier.$F'],\n    [/\\[/, '[', '@object_dynamic_key='], //\n    [/\\s*=\\s*/, 'operator.assign', '@object_value='],\n    [/:/, 'operator.assign.key-value', '@object_value='],\n    [/\\,/, 'delimiter.comma'],\n    'indentable_',\n    'expr_',\n  ],\n\n  object_value: [\n    eolpop,\n    // couldnt this be indented as well?\n    // [/(?=,|\\})/, 'delimiter', '@pop']\n    [/,|\\}|\\]|\\)/, '@rematch', '@pop'],\n    'expr_',\n  ],\n\n  object_dynamic_key: [[']', ']', '@pop'], 'expr_'],\n\n  comment_: [[/#(\\s.*)?(\\n|$)/, 'comment']],\n\n  block_comment_: [[/###/, 'comment.start', '@_block_comment']],\n\n  _block_comment: [\n    [/###/, 'comment.end', '@pop'],\n    [/[^#]+/, 'comment'],\n    [/#(?!##)/, 'comment'],\n  ],\n\n  // add try_start that accepts catch on the same line?\n  try_: [[/try@B/, 'keyword.try', '@>_try&try']],\n\n  catch_: [\n    [/(catch\\s+)(?=@id(\\s|$))/, 'keyword.catch', '@catch_start&catch'],\n    [/catch@B/, 'keyword.catch', '@catch_start&catch'],\n  ],\n\n  catch_start: [\n    [/@id/, 'identifier.decl-const', { switchTo: '@>_catch' }],\n    [/.?/, '@rematch', { switchTo: '@>_catch' }],\n  ],\n\n  _catch: [denter('@>block', -1, 0), 'block_'],\n\n  _try: [denter('@>block', -1, 0), 'block_'],\n\n  do_: [\n    // [/(do)(\\()/,['keyword.do','(','@>_do_params&do']]\n    [/do(?=\\()/, 'keyword.do', '@>do_start&do'],\n    [/do(?=\\s*\\|)/, 'keyword.do', '@>do_piped&do'],\n    [/do@B/, 'keyword.do', '@>_do&do'],\n  ],\n\n  do_start: [\n    denter(null, -1, -1),\n    [/\\(/, '(', { switchTo: '@_do_params' }],\n    [/./, '@rematch', { switchTo: '@_do' }],\n  ],\n\n  do_piped: [\n    denter(null, -1, -1),\n    [/\\s*\\|/, 'args.open', { switchTo: '@_do_piped_params' }],\n    [/./, '@rematch', { switchTo: '@_do' }],\n  ],\n\n  _do_piped_params: [[/\\|/, 'args.close', { switchTo: '@_do' }], 'params_'],\n\n  _do_params: [[/\\)/, ')', { switchTo: '@_do' }], 'params_'],\n\n  _do: [\n    denter(2, -1, 0),\n    // block in general, no?\n    [/(\\}|\\)|\\])/, '@rematch', '@pop'],\n    'block_',\n  ],\n\n  class_: [\n    [/(extend)(?=\\s+class )/, 'keyword.$1'],\n    [/(global)(?=\\s+class )/, 'keyword.$1'],\n    [\n      /(class)(\\s)(@id)/,\n      ['keyword.$1', 'white.$1name', 'entity.name.class.decl-const', '@class_start='],\n    ],\n    [/(class)(?=\\n)/, 'keyword.$1', '@>_class&class='],\n  ],\n\n  class_start: [\n    [/(\\s+\\<\\s+)(@id)/, ['keyword.extends', 'identifier.superclass']],\n    [/@comment/, 'comment'],\n    [/^/, '@rematch', { switchTo: '@>_class&class=' }],\n  ],\n\n  tagclass_: [\n    [/(extend)(?=\\s+tag )/, 'keyword.$1'],\n    [/(global)(?=\\s+tag )/, 'keyword.$1'],\n    [\n      /(tag)(\\s)(@constant)/,\n      ['keyword.tag', 'white.tagname', 'entity.name.component.local', '@tagclass_start='],\n    ], // only when uppercase\n    [\n      /(tag)(\\s)(@id)/,\n      ['keyword.tag', 'white.tagname', 'entity.name.component.global', '@tagclass_start='],\n    ], // only when uppercase\n  ],\n\n  tagclass_start: [\n    [/(\\s+\\<\\s+)(@id)/, ['keyword.extends', 'identifier.superclass']],\n    [/@comment/, 'comment'],\n    [/^/, '@rematch', { switchTo: '@>_tagclass&component=' }],\n  ],\n\n  import_: [\n    [/(import)(?=\\s+['\"])/, 'keyword.import', '@>import_source'],\n    [\n      /(import)(\\s+type)(?=\\s[\\w\\$\\@\\{])/,\n      ['keyword.import', 'keyword.type', '@>import_body&-_imports=decl-import/part'],\n    ],\n    [/(import)@B/, 'keyword.import', '@>import_body&-_imports=decl-import/part'],\n  ],\n\n  import_body: [\n    denter(null, -1, 0),\n    [\n      /(@esmIdentifier)( +from)/,\n      ['identifier.$F.default', 'keyword.from', { switchTo: '@import_source' }],\n    ],\n    [\n      /(\\*)(\\s+as\\s+)(@esmIdentifier)(\\s+from)/,\n      [\n        'keyword.star',\n        'keyword.as',\n        'identifier.$F.ns',\n        'keyword.from',\n        { switchTo: '@import_source' },\n      ],\n    ],\n    [\n      /(@esmIdentifier)(\\s*,\\s*)(\\*)(\\s+as\\s+)(@esmIdentifier)(from)/,\n      [\n        'identifier.$F.default',\n        'delimiter.comma',\n        'keyword.star',\n        'keyword.as',\n        'identifier.$F.ns',\n        'keyword.from',\n        { switchTo: '@import_source' },\n      ],\n    ],\n    // [/(\\*)(\\s+as\\s+)(@esmIdentifier)/, ['keyword.star','keyword.as','identifier.const.import',switchTo: '@/delim']]\n    // [/(@esmIdentifier)(\\s+as\\s+)(@esmIdentifier)/, ['alias','keyword.as','identifier.const.import']]\n    [/\\ *from/, 'keyword.from', { switchTo: '@import_source' }],\n    [/\\{/, 'specifiers.{', '@esm_specifiers/part'],\n    [/(@esmIdentifier)/, 'identifier.$F', { switchTo: '@/delim' }],\n    [/\\s*\\,\\s*/, 'delimiter.comma', { switchTo: '@/part' }],\n    'comma_',\n    'common_',\n  ],\n\n  import_source: [denter(null, -1, 0), [/[\"']/, 'path.open', '@_path=$#'], eolpop],\n\n  export_: [\n    [/(export)( +)(default)@B/, ['keyword.export', 'white', 'keyword.default']], // ,'@>import_body'\n    [/(export)(?= +(let|const|var|class|tag)@B)/, 'keyword.export'], // ,'@>import_body'\n    [/(export)( +)(global)@B/, ['keyword.export', 'white', 'keyword.global']], // ,'@>import_body'\n\n    [\n      /(export)(\\s+\\*\\s+)(from)@B/,\n      ['keyword.export', 'operator.star', 'keyword.from', '@>import_source'],\n    ],\n    [/(export)@B/, 'keyword.export', '@>export_body'],\n  ],\n\n  export_body: [\n    denter(null, -1, 0),\n    [/(\\*)(\\s+as\\s+)(@esmIdentifier)/, ['keyword.star', 'keyword.as', 'identifier.const.export']],\n    [/(@esmIdentifier)(\\s+as\\s+)(default)/, ['alias', 'keyword.as', 'alias.default']],\n    [\n      /(@esmIdentifier)(\\s+as\\s+)(@esmIdentifier)/,\n      ['alias', 'keyword.as', 'identifier.const.export'],\n    ],\n    [/from/, 'keyword.from', { switchTo: '@import_source' }],\n    [/\\{/, '{', '@esm_specifiers=export/part'],\n    [/(@esmIdentifier)/, 'identifier.const.export'],\n    [/\\*/, 'operator.star'],\n    'comma_',\n    'common_',\n  ],\n\n  esm_specifiers: [\n    [/\\}/, '}', '@pop'],\n    [\n      /(@esmIdentifier)(\\s+as\\s+)(@esmIdentifier)/,\n      ['alias', 'keyword.as', 'identifier.const.$F', { switchTo: '@/delim' }],\n    ],\n    [\n      /@esmIdentifier/,\n      {\n        cases: {\n          '$/==part': { token: 'identifier.const.$S4', switchTo: '@/delim' },\n          '@default': { token: 'invalid' },\n        },\n      },\n    ],\n    [/\\s*\\,\\s*/, 'delimiter.comma', { switchTo: '@/part' }],\n    'whitespace',\n  ],\n\n  _path: [\n    [/[^\"'\\`\\{\\\\]+/, 'path'],\n    [/@escapes/, 'path.escape'],\n    [/\\./, 'path.escape.invalid'],\n    [/\\{/, 'invalid'],\n    [/[\"'`]/, { cases: { '$#==$F': { token: 'path.close', next: '@pop' }, '@default': 'path' } }],\n  ],\n\n  member_: [\n    // [/static(?=\\s+(get|set|def) )/,'keyword.static'] # only in class and tagclass?\n    [/(constructor)@B/, 'entity.name.constructor', '@>def_params&def/def'],\n    [\n      /(def|get|set)(\\s)(@defid)/,\n      ['keyword.$1', 'white.entity', 'entity.name.$1', '@>def_params&$1/$1'],\n    ],\n    [/(def|get|set)(\\s)(\\[)/, ['keyword.$1', 'white.entity', '$$', '@>def_dynamic_name/$1']],\n  ],\n\n  func_: [\n    [/export(?=\\s+(get|set|def|global) )/, 'keyword.export'], // only in class and tagclass?\n    [/global(?=\\s+(get|set|def) )/, 'keyword.global'], // only in class and tagclass?\n    [\n      /(def)(\\s)(@id)(\\.)(@defid)/,\n      [\n        'keyword.$1',\n        'white.entity',\n        'identifier.target',\n        'operator',\n        'entity.name.def',\n        '@>def_params&$1/$1',\n      ],\n    ],\n\n    [\n      /(def)(\\s)(@defid)/,\n      ['keyword.$1', 'white.entity', 'entity.name.function.decl-const-func', '@>def_params&$1/$1'],\n    ],\n  ],\n\n  flow_: [\n    // [/(else)(?=\\s|$)/, ['keyword.$1','@flow_start.$S2.flow.$S4']]\n    [/(if|else|elif|unless)(?=\\s|$)/, ['keyword.$1', '@flow_start=$1']],\n  ],\n\n  flow_start: [\n    denter({ switchTo: '@>_flow&$F' }, -1, -1),\n    // denter({switchTo: '@>_flow&-body'},-1,-1)\n    // denter('@>_flow&block',-1,-1)\n    [/[ \\t]+/, 'white'],\n    'expr_',\n  ],\n\n  for_: [\n    [/for(?: own)?@B/, 'keyword.$#', '@for_start&forscope=decl-for'],\n    // [/for@B/,'keyword.$#','@for_start&flow=let']\n  ],\n\n  while_: [[/(while|until)@B/, 'keyword.$#', '@>while_body']],\n  while_body: [denter(2, -1, 0), 'block_'],\n\n  for_start: [\n    denter({ switchTo: '@>for_body' }, -1, -1),\n    [/\\[/, 'array.[', '@array_var_body'],\n    [/\\{/, 'object.{', '@object_body'], // object_var_body?\n    [/(@variable)/, 'identifier.$F'],\n    [/(\\s*\\,\\s*)/, 'separator', '@=decl-for-index'],\n    [/\\s(in|of)@B/, 'keyword.$1', { switchTo: '@>for_source=' }],\n    [/[ \\t]+/, 'white'],\n    'type_',\n  ],\n  for_source: [\n    denter({ switchTo: '@>for_body' }, -1, { switchTo: '@for_body' }),\n    'expr_',\n    [/[ \\t]+/, 'white'],\n  ],\n\n  for_body: [denter(2, -1, 0), 'block_'],\n\n  decorator_: [\n    [/(@decid)(\\()/, ['decorator', '$2', '@_decorator_params']],\n    [/(@decid)/, 'decorator'],\n  ],\n\n  _decorator_params: [[/\\)/, ')', '@pop'], 'params_'],\n\n  field_: [\n    [\n      /((?:lazy )?)((?:static )?)(const|let|attr)(?=\\s|$)/,\n      ['keyword.lazy', 'keyword.static', 'keyword.$1', '@_vardecl=field-$3'],\n    ], // $2_body.$S2.$2.$S4\n    [/(static\\s+)(?=@fieldid)/, 'keyword.static'],\n    [/(@fieldid)(?=$)/, 'entity.name.field'],\n    [/(@fieldid)/, ['entity.name.field', '@_field_1']],\n  ],\n\n  _field_1: [\n    denter(null, -1, -1),\n    'type_',\n    [/(\\s*=)(?!\\=)/, ['operator.assign', '@>_field_value&field']],\n    [/(\\s*(?:\\@)set\\s*)/, ['keyword.spy', '@>_def&spy']],\n  ],\n\n  _field_value: [\n    denter(2, -1, 0),\n    'block_', // sure?\n    [/(\\s*(?:\\@)set\\s*)/, ['@rematch', '@pop']],\n  ],\n\n  var_: [\n    [\n      /((?:export )?)(const|let)(?=\\s[\\[\\{\\$a-zA-Z]|\\s*$)/,\n      ['keyword.export', 'keyword.$1', '@_vardecl=decl-$2'],\n    ], // $2_body.$S2.$2.$S4\n    [/((?:export )?)(const|let)(?=\\s|$)/, ['keyword.export', 'keyword.$1']],\n  ],\n\n  inline_var_: [\n    [/(const|let)(?=\\s[\\[\\{\\$a-zA-Z]|\\s*$)/, ['keyword.$1', '@inline_var_body=decl-$1']],\n  ],\n\n  string_: [\n    [/\"\"\"/, 'string', '@_herestring=\"\"\"'],\n    [/'''/, 'string', \"@_herestring='''\"],\n    [/[\"'`]/, 'string.open', '@_string=$#'],\n  ],\n\n  number_: [\n    [/0[xX][0-9a-fA-F_]+/, 'number.hex'],\n    [/0[b][01_]+/, 'number.binary'],\n    [/0[o][0-9_]+/, 'number.octal'],\n    [/(\\d+)([a-z]+|\\%)/, ['number', 'unit']],\n    [/(\\d*\\.\\d+(?:[eE][\\-+]?\\d+)?)([a-z]+|\\%)/, ['number.float', 'unit']],\n    [/\\d+[eE]([\\-+]?\\d+)?/, 'number.float'],\n    [/\\d[\\d_]*\\.\\d[\\d_]*([eE][\\-+]?\\d+)?/, 'number.float'],\n    [/\\d[\\d_]*/, 'number.integer'],\n    [/0[0-7]+(?!\\d)/, 'number.octal'],\n    [/\\d+/, 'number'],\n  ],\n\n  _string: [\n    [/[^\"'\\`\\{\\\\]+/, 'string'],\n    [/@escapes/, 'string.escape'],\n    [/\\./, 'string.escape.invalid'],\n    [\n      /\\{/,\n      {\n        cases: {\n          \"$F=='\": 'string',\n          '@default': { token: 'string.bracket.open', next: '@interpolation_body' },\n        },\n      },\n    ],\n    [\n      /[\"'`]/,\n      { cases: { '$#==$F': { token: 'string.close', next: '@pop' }, '@default': 'string' } },\n    ],\n    [/#/, 'string'],\n  ],\n\n  _herestring: [\n    [/(\"\"\"|''')/, { cases: { '$1==$F': { token: 'string', next: '@pop' }, '@default': 'string' } }],\n    [/[^#\\\\'\"\\{]+/, 'string'],\n    [/['\"]+/, 'string'],\n    [/@escapes/, 'string.escape'],\n    [/\\./, 'string.escape.invalid'],\n    [\n      /\\{/,\n      {\n        cases: {\n          '$F==\"\"\"': { token: 'string', next: '@interpolation_body' },\n          '@default': 'string',\n        },\n      },\n    ],\n    [/#/, 'string'],\n  ],\n\n  interpolation_body: [[/\\}/, 'string.bracket.close', '@pop'], 'expr_'],\n\n  _class: [\n    denter(toodeep, -1, 0),\n    // 'var_'\n    'css_',\n    'member_',\n    'comment_',\n    'decorator_',\n    [/(get|set|def|static|prop|attr)@B/, 'keyword.$0'],\n    'field_',\n    'common_',\n  ],\n\n  _tagclass: [\n    '_class',\n    [/(?=\\<self)/, 'entity.name.def.render', '@_render&def'],\n    // self def\n  ],\n\n  def_params: [\n    // denter({switchTo: '@>_def'},-1,{switchTo: '@>_def'})\n    [/\\(/, '(', '@def_parens'],\n    [/^/, '@rematch', { switchTo: '@_def' }],\n    [/do@B/, 'keyword.do', { switchTo: '@_def' }],\n    'params_',\n    [/@comment/, 'comment'],\n  ],\n\n  def_parens: [[/\\)/, ')', '@pop'], 'params_'],\n\n  def_dynamic_name: [[']', { token: 'square.close', switchTo: '@def_params&$/' }], 'expr_'],\n\n  _render: [denter(2, -1, -1), 'block_'],\n\n  _def: [denter(2, -1, 0), 'block_'],\n\n  _flow: [denter(2, -1, 0), 'block_'],\n\n  _varblock: [\n    denter(1, -1, -1),\n    [/\\[/, 'array.[', '@array_var_body'],\n    [/\\{/, 'object.{', '@object_body'],\n    [/(@variable)/, 'identifier.$F'],\n    [/\\s*\\,\\s*/, 'separator'],\n    [/(\\s*\\=\\s*)(?=(for|while|until|if|unless|try)\\s)/, 'operator', '@pop'],\n    [/(\\s*\\=\\s*)/, 'operator', '@var_value='],\n    'type_',\n    [/#(\\s.*)?\\n?$/, 'comment'],\n  ],\n\n  _vardecl: [\n    denter(null, -1, -1),\n    [/\\[/, 'array.[', '@array_var_body'],\n    [/\\{/, 'object.{', '@object_body'],\n    [/(@variable)(?=\\n|,|$)/, 'identifier.$F', '@pop'],\n    [/(@variable)/, 'identifier.$F'],\n    [/(\\s*\\=\\s*)/, 'operator.declval', { switchTo: '@var_value&value=' }], // ,switchTo: '@var_value='\n    'type_',\n  ],\n\n  array_var_body: [\n    [/\\]/, ']', '@pop'],\n    [/\\{/, 'object.{', '@object_body'],\n    [/\\[/, 'array.[', '@array_var_body'],\n    'spread_',\n    [/(@variable)/, 'identifier.$F'],\n    [/(\\s*\\=\\s*)/, 'operator.assign', '@array_var_body_value='],\n    // 'expr_'\n    [',', 'delimiter'],\n  ],\n\n  array_var_body_value: [[/(?=,|\\)|]|})/, 'delimiter', '@pop'], 'expr_'],\n\n  inline_var_body: [\n    [/\\[/, 'array.[', '@array_var_body'],\n    [/\\{/, 'object.{', '@object_body'],\n    [/(@variable)/, 'identifier.$F'],\n    [/(\\s*\\=\\s*)/, 'operator', '@pop'], // ,switchTo: '@var_value='\n    'type_',\n  ],\n\n  var_value: [\n    [/(?=,|\\)|]|})/, 'delimiter', '@pop'],\n    denter({ switchTo: '@>block' }, -1, -1),\n    'block_',\n    // 'do_'\n    // 'expr_'\n    // 'common_'\n  ],\n\n  common_: [[/^(\\t+)(?=\\n|$)/, 'white.tabs'], 'whitespace'],\n  comma_: [[/\\s*,\\s*/, 'delimiter.comma']],\n\n  spread_: [[/\\.\\.\\./, 'operator.spread']],\n\n  type_: [[/\\\\/, '@rematch', '@_type&-_type/0']],\n\n  _type: [\n    denter(-1, -1, -1),\n    [/\\\\/, 'delimiter.type.prefix'],\n    // these should probably stack and pair\n    [/\\[/, 'delimiter.type', '@/]'],\n    [/\\(/, 'delimiter.type', '@/)'],\n    [/\\{/, 'delimiter.type', '@/}'],\n    [/\\</, 'delimiter.type', '@/>'],\n    [/\\|/, 'delimiter.type.union'],\n    [\n      /\\,|\\s|\\=|\\./,\n      {\n        cases: {\n          '$/==0': { token: '@rematch', next: '@pop' },\n          '@default': 'type',\n        },\n      },\n    ],\n    [\n      /[\\]\\}\\)\\>]/,\n      {\n        cases: {\n          '$#==$/': { token: 'delimiter.type', next: '@pop' },\n          '@default': { token: '@rematch', next: '@pop' },\n        },\n      },\n    ],\n    [/[\\w\\-\\$]+/, 'type'],\n  ],\n\n  css_: [\n    [/global(?=\\s+css@B)/, 'keyword.$#'],\n    [/css(?:\\s+)?/, 'keyword.css', '@>css_selector&rule-_sel'],\n  ],\n\n  sel_: [\n    [/(\\%)((?:@id)?)/, ['style.selector.mixin.prefix', 'style.selector.mixin']],\n    [/(\\@)(\\.{0,2}[\\w\\-\\<\\>\\!]*\\+?)/, 'style.selector.modifier'],\n    [/(\\@)(\\.{0,2}[\\w\\-\\<\\>\\!]*)/, 'style.selector.modifier'],\n    [/\\.([\\w\\-]+)/, 'style.selector.class-name'],\n    [/\\#([\\w\\-]+)/, 'style.selector.id'],\n    [/([\\w\\-]+)/, 'style.selector.element'],\n    [/(>+|~|\\+)/, 'style.selector.operator'],\n    [/(\\*+)/, 'style.selector.element.any'],\n    [/(\\$)((?:@id)?)/, ['style.selector.reference.prefix', 'style.selector.reference']],\n    [/\\&/, 'style.selector.context'],\n    [/\\(/, 'delimiter.selector.parens.open', '@css_selector_parens'],\n    [/\\[/, 'delimiter.selector.attr.open', '@css_selector_attr'],\n    [/\\s+/, 'white'],\n    [/,/, 'style.selector.delimiter'],\n    [/#(\\s.*)?\\n?$/, 'comment'],\n  ],\n\n  css_props: [\n    denter(null, -1, 0),\n    [/(?=@cssPropertyKey2)/, '', '@css_property&-_styleprop-_stylepropkey'],\n    [/#(\\s.*)?\\n?$/, 'comment'],\n    [/(?=[\\%\\*\\w\\&\\$\\>\\.\\[\\@\\!]|\\#[\\w\\-])/, '', '@>css_selector&rule-_sel'],\n    [/\\s+/, 'white'],\n  ],\n\n  css_selector: [\n    denter({ switchTo: '@css_props' }, -1, { token: '@rematch', switchTo: '@css_props&_props' }),\n    [/(\\}|\\)|\\])/, '@rematch', '@pop'],\n    [/(?=\\s*@cssPropertyKey2)/, '', { switchTo: '@css_props&_props' }],\n    [/\\s*#\\s/, '@rematch', { switchTo: '@css_props&_props' }],\n    'sel_',\n  ],\n\n  css_inline: [\n    [/\\]/, 'style.close', '@pop'],\n    [/(?=@cssPropertyKey2)/, '', '@css_property&-_styleprop-_stylepropkey'],\n    [/(?=@cssPropertyPath\\])/, '', '@css_property&-_styleprop-_stylepropkey'],\n  ],\n\n  css_selector_parens: [[/\\)/, 'delimiter.selector.parens.close', '@pop'], 'sel_'],\n\n  css_selector_attr: [[/\\]/, 'delimiter.selector.parens.close', '@pop'], 'sel_'],\n\n  css_property: [\n    denter(null, -1, -1),\n    [/\\]/, '@rematch', '@pop'],\n    [/(\\d+)(@id)/, ['style.property.unit.number', 'style.property.unit.name']],\n    [/((--|\\$)@id)/, 'style.property.var'],\n    [/(-*@id)/, 'style.property.name'],\n    // [/(\\@+)([\\>\\<\\!]?[\\w\\-]+)/, ['style.property.modifier.start','style.property.modifier']]\n    [/@cssModifier/, 'style.property.modifier'],\n    [/(\\@+|\\.+)(@id\\-?)/, ['style.property.modifier.start', 'style.property.modifier']],\n    [/\\+(@id)/, 'style.property.scope'],\n    [\n      /\\s*([\\:]\\s*)(?=@br|$)/,\n      'style.property.operator',\n      { switchTo: '@>css_multiline_value&_stylevalue' },\n    ],\n    [/\\s*([\\:]\\s*)/, 'style.property.operator', { switchTo: '@>css_value&_stylevalue' }],\n  ],\n\n  css_value_: [\n    [/(x?xs|sm\\-?|md\\-?|lg\\-?|xx*l|\\dxl|hg|x+h)\\b/, 'style.value.size'],\n    [/\\#[0-9a-fA-F]+/, 'style.value.color.hex'],\n    [/((--|\\$)@id)/, 'style.value.var'],\n    [\n      /(@optid)(\\@+|\\.+)(@optid)/,\n      ['style.property.name', 'style.property.modifier.prefix', 'style.property.modifier'],\n    ],\n    'op_',\n    'string_',\n    'number_',\n    'comment_',\n    [/\\s+/, 'style.value.white'],\n    [/\\(/, 'delimiter.style.parens.open', '@css_expressions'],\n    [/\\{/, 'delimiter.style.curly.open', '@css_interpolation&-_styleinterpolation'],\n    [/(@id)/, 'style.value'],\n  ],\n\n  css_value: [\n    denter({ switchTo: '@>css_multiline_value' }, -1, -1),\n    // [/@cssModifier/, '@rematch', '@pop']\n    [/@cssPropertyKey2/, '@rematch', '@pop'],\n    [/;/, 'style.delimiter', '@pop'],\n    [/(\\}|\\)|\\])/, '@rematch', '@pop'],\n    'css_value_',\n  ],\n\n  css_multiline_value: [denter(null, -1, 0), [/@cssPropertyKey2/, 'invalid'], 'css_value_'],\n\n  css_expressions: [\n    [/\\)/, 'delimiter.style.parens.close', '@pop'],\n    [/\\(/, 'delimiter.style.parens.open', '@css_expressions'],\n    'css_value',\n  ],\n\n  css_interpolation: [[/\\}/, 'delimiter.style.curly.close', '@pop'], 'expr_'],\n\n  expressions: [[/\\,/, 'delimiter.comma']],\n\n  whitespace: [\n    [/[\\r\\n]+/, 'br'],\n    [/[ \\t\\r\\n]+/, 'white'],\n  ],\n\n  space: [[/[ \\t]+/, 'white']],\n\n  tag_: [\n    [/(\\s*)(<)(?=\\.)/, ['white', 'tag.open', '@_tag/flag']],\n    [/(\\s*)(<)(?=\\w|\\{|\\[|\\%|\\#|>)/, ['white', 'tag.open', '@_tag/name']],\n  ],\n  tag_content: [\n    denter(2, -1, 0),\n    [/\\)|\\}|\\]/, '@rematch', '@pop'],\n    'common_',\n    'flow_',\n    'var_',\n    'for_',\n    'css_',\n    'expr_',\n    'do_',\n    // dont support object keys directly here\n  ],\n\n  tag_children: [],\n\n  _tag: [\n    [/\\/>/, 'tag.close', '@pop'],\n    [/>/, 'tag.close', { switchTo: '@>tag_content=&-_tagcontent' }],\n    // '@>css_selector&rule-_sel'\n    [/>/, 'tag.close', '@pop'],\n    [/(\\-?\\d+)/, 'tag.$S3'],\n    [/(\\%)(@id)/, ['tag.mixin.prefix', 'tag.mixin']],\n    [/\\#@id/, 'tag.id'],\n\n    [\n      /\\./,\n      {\n        cases: {\n          '$/==event': { token: 'tag.event-modifier.start', switchTo: '@/event-modifier' },\n          '$/==event-modifier': { token: 'tag.event-modifier.start', switchTo: '@/event-modifier' },\n          '$/==modifier': { token: 'tag.modifier.start', switchTo: '@/modifier' },\n          '$/==rule': { token: 'tag.rule-modifier.start', switchTo: '@/rule-modifier' },\n          '$/==rule-modifier': { token: 'tag.rule-modifier.start', switchTo: '@/rule-modifier' },\n          '@default': { token: 'tag.flag.start', switchTo: '@/flag' },\n        },\n      },\n    ],\n\n    [\n      /(\\$@id)/,\n      {\n        cases: {\n          '$/==name': 'tag.reference',\n          '@default': 'tag.$/',\n        },\n      },\n    ],\n\n    [/\\{/, 'tag.$/.interpolation.open', '@_tag_interpolation'],\n    [/\\[/, 'style.open', '@css_inline'],\n    [/(\\s*\\=\\s*)/, 'operator.equals.tagop.tag-$/', '@_tag_value&-value'],\n    [/\\:/, { token: 'tag.event.start', switchTo: '@/event' }],\n    'tag_event_',\n    // 'tag_attr_'\n    [\n      /(\\-?@tagIdentifier)(\\:@id)?/,\n      {\n        cases: {\n          '$/==attr': { token: '@rematch', next: '@_tag_attr&-_tagattr' },\n          '@default': { token: 'tag.$/' },\n        },\n      },\n    ],\n    // [/\\@/,token: 'tag.event.start', switchTo: '@/event']\n    // [/\\{/,token: 'tag.$/.braces.open', next: '@_tag_interpolation/0']\n    [/\\(/, { token: 'tag.$/.parens.open', next: '@_tag_parens/0' }],\n    [/\\s+/, { token: 'tag.white', switchTo: '@/attr' }],\n    'comment_',\n  ],\n  tag_event_: [\n    // add an additional slot for name etc?\n    // [/(\\@)(@optid)/,['tag.event.start','tag.event.name','@_tag_event&_tagevent/$2']]\n    [/(?=\\@@optid)/, '', '@_tag_event&-_listener'],\n  ],\n\n  _tag_part: [[/\\)|\\}|\\]|\\>/, '@rematch', '@pop']],\n  _tag_event: [\n    '_tag_part',\n    [/(\\@)(@optid)/, ['tag.event.start', 'tag.event.name']],\n    [/(\\.)(@optid)/, ['tag.event-modifier.start', 'tag.event-modifier.name']],\n    [/\\(/, { token: 'tag.$/.parens.open', next: '@_tag_parens/0' }],\n    [/(\\s*\\=\\s*)/, 'operator.equals.tagop.tag-$/', '@_tag_value&handler'],\n    [/\\s+/, '@rematch', '@pop'],\n  ],\n\n  tag_attr_: [\n    // add an additional slot for name etc?\n    // [/(\\@)(@optid)/,['tag.event.start','tag.event.name','@_tag_event&_tagevent/$2']]\n    [/(?=@tagIdentifier(\\:@id)?)/, '', '@_tag_attr&-_attribute'],\n  ],\n\n  _tag_attr: [\n    '_tag_part',\n    [/(\\-?@tagIdentifier)(\\:@id)?/, 'tag.attr'],\n    [/\\.(@optid)/, 'tag.event-modifierzz'],\n    [/\\(/, { token: 'tag.parens.open.$/', next: '@_tag_parens/0' }],\n    [/(\\s*\\=\\s*)/, 'operator.equals.tagop.tag-$/', '@_tag_value&-tagattrvalue'],\n    [/\\s+/, '@rematch', '@pop'],\n  ],\n\n  _tag_interpolation: [[/\\}/, 'tag.$/.interpolation.close', '@pop'], 'expr_', [/\\)|\\]/, 'invalid']],\n\n  _tag_parens: [[/\\)/, 'tag.$/.parens.close', '@pop'], 'arglist_', [/\\]|\\}/, 'invalid']],\n\n  _tag_value: [[/(?=(\\/?\\>|\\s))/, '', '@pop'], 'attr_expr_'],\n\n  regexp_: [\n    [\n      /\\/(?!\\ )(?=([^\\\\\\/]|\\\\.)+\\/)/,\n      { token: 'regexp.slash.open', bracket: '@open', next: '@_regexp' },\n    ],\n    [/\\/\\/\\//, { token: 'regexp.slash.open', bracket: '@open', next: '@_hereregexp' }],\n    [/(\\/)(\\/)/, ['regexp.slash.open', 'regexp.slash.close']],\n  ],\n\n  _regexp: [\n    [\n      /(\\{)(\\d+(?:,\\d*)?)(\\})/,\n      ['regexp.escape.control', 'regexp.escape.control', 'regexp.escape.control'],\n    ],\n    [\n      /(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/,\n      ['regexp.escape.control', { token: 'regexp.escape.control', next: '@_regexrange' }],\n    ],\n    [/(\\()(\\?:|\\?=|\\?!)/, ['regexp.escape.control', 'regexp.escape.control']],\n    [/[()]/, 'regexp.escape.control'],\n    [/@regexpctl/, 'regexp.escape.control'],\n    [/[^\\\\\\/]/, 'regexp'],\n    [/@regexpesc/, 'regexp.escape'],\n    [/\\\\:/, 'regexp.escape'],\n    [/\\\\\\./, 'regexp.invalid'],\n    [/(\\/)(\\w+)/, [{ token: 'regexp.slash.close' }, { token: 'regexp.flags', next: '@pop' }]],\n    ['/', { token: 'regexp.slash.close', next: '@pop' }],\n    [/./, 'regexp.invalid'],\n  ],\n\n  _regexrange: [\n    [/-/, 'regexp.escape.control'],\n    [/\\^/, 'regexp.invalid'],\n    [/@regexpesc/, 'regexp.escape'],\n    [/[^\\]]/, 'regexp'],\n    [/\\]/, 'regexp.escape.control', '@pop'],\n  ],\n\n  _hereregexp: [\n    [/[^\\\\\\/#]/, 'regexp'],\n    [/\\\\./, 'regexp'],\n    [/#.*$/, 'comment'],\n    ['///[igm]*', 'regexp', '@pop'],\n    [/\\//, 'regexp'],\n    'comment_',\n  ],\n};\n\n// states are structured:\n// 1 = the monarch state\n// 2 = the current indentation (I)\n// 3 = the current scope name/type (&)\n// 4 = various flags (F)\n// 5 = the monarch substate -- for identifiers++\nfunction rewrite\u039Estate(raw) {\n  let state = ['$S1', '$S2', '$S3', '$S4', '$S5', '$S6'];\n\n  if (raw.match(/\\@(pop|push|popall)/)) {\n    return raw;\n  }\n\n  if (raw[0] == '@') {\n    raw = raw.slice(1);\n  }\n\n  if (raw.indexOf('.') >= 0) {\n    return raw;\n  }\n\n  raw = rewrite\u039Etoken(raw);\n  // if raw.match(/^[\\w\\$\\.\\-]+$/)\n  // return raw\n\n  if (raw[0] == '>') {\n    state[1] = '$S6\\t';\n    raw = raw.slice(1);\n  }\n\n  for (\n    let i\u03C62 = 0, items\u03C6 = iter$__(raw.split(/(?=[\\/\\&\\=\\*])/)), len\u03C6 = items\u03C6.length;\n    i\u03C62 < len\u03C6;\n    i\u03C62++\n  ) {\n    let part = items\u03C6[i\u03C62];\n    if (part[0] == '&') {\n      if (part[1] == '-' || part[1] == '_') {\n        state[2] = '$S3' + part.slice(1);\n      } else {\n        state[2] = '$S3-' + part.slice(1);\n      }\n    } else if (part[0] == '+') {\n      state[3] = '$S4-' + part.slice(1);\n    } else if (part[0] == '=') {\n      state[3] = part.slice(1);\n    } else if (part[0] == '/') {\n      state[4] = part.slice(1);\n    } else if (part[0] == '*') {\n      state[5] = part.slice(1);\n    } else {\n      state[0] = part;\n    }\n  }\n  return state.join('.');\n}\n\nfunction rewrite\u039Etoken(raw) {\n  let orig = raw;\n  raw = raw.replace('$/', '$S5');\n  raw = raw.replace('$F', '$S4');\n  raw = raw.replace('$&', '$S3');\n  raw = raw.replace('$I', '$S2');\n  raw = raw.replace('$T', '$S2');\n\n  // if orig != raw\n  // console.log 'rewriting token',orig,raw\n  return raw;\n}\n\nfunction rewrite\u039Eactions(actions, add) {\n  if (typeof actions == 'string') {\n    // and parts.indexOf('$') >= 0\n\n    actions = { token: actions };\n  }\n\n  if (actions && actions.token != undefined) {\n    actions.token = rewrite\u039Etoken(actions.token);\n\n    if (typeof add == 'string') {\n      actions.next = add;\n    } else if (add) {\n      Object.assign(actions, add);\n    }\n\n    if (actions.next) {\n      actions.next = rewrite\u039Estate(actions.next);\n    }\n    if (actions.switchTo) {\n      actions.switchTo = rewrite\u039Estate(actions.switchTo);\n    }\n  } else if (actions && actions.cases) {\n    // console.log 'found cases to transform!!'\n    let cases = {};\n    for (\n      let o\u03C6 = actions.cases, i\u03C63 = 0, keys\u03C62 = Object.keys(o\u03C6), l\u03C62 = keys\u03C62.length, k, v;\n      i\u03C63 < l\u03C62;\n      i\u03C63++\n    ) {\n      k = keys\u03C62[i\u03C63];\n      v = o\u03C6[k];\n      let newkey = rewrite\u039Etoken(k);\n      cases[newkey] = rewrite\u039Eactions(v);\n    }\n    actions.cases = cases;\n  } else if (actions instanceof Array) {\n    let result = [];\n    let curr = null;\n    for (let i = 0, items\u03C62 = iter$__(actions), len\u03C62 = items\u03C62.length; i < len\u03C62; i++) {\n      let action = items\u03C62[i];\n      if (action[0] == '@' && i == actions.length - 1 && curr) {\n        action = { next: action };\n      }\n\n      if (typeof action == 'object') {\n        if (action.token != undefined || action.cases) {\n          result.push((curr = Object.assign({}, action)));\n        } else {\n          Object.assign(curr, action);\n        }\n      } else if (typeof action == 'string') {\n        result.push((curr = { token: rewrite\u039Etoken(action) }));\n      }\n    }\n    actions = result;\n  }\n\n  if (actions instanceof Array) {\n    for (let i = 0, items\u03C63 = iter$__(actions), len\u03C63 = items\u03C63.length; i < len\u03C63; i++) {\n      let action = items\u03C63[i];\n      if (action.token && action.token.indexOf('$$') >= 0) {\n        action.token = action.token.replace('$$', '$' + (i + 1));\n      }\n      if (action.next) {\n        action.next = rewrite\u039Estate(action.next);\n      }\n      if (action.switchTo) {\n        action.switchTo = rewrite\u039Estate(action.switchTo);\n      }\n    }\n  }\n\n  return actions;\n}\n\nfunction rewrite\u039Erule(owner, key) {\n  let rule;\n\n  return (rule = owner[key]);\n}\n\nfor (let i\u03C64 = 0, keys\u03C63 = Object.keys(states), l\u03C63 = keys\u03C63.length, key, rules; i\u03C64 < l\u03C63; i\u03C64++) {\n  key = keys\u03C63[i\u03C64];\n  rules = states[key];\n  let i = 0;\n  while (i < rules.length) {\n    let rule = rules[i];\n    if (rule[0] instanceof Array) {\n      rules.splice(i, 1, ...rule);\n      continue;\n    } else if (typeof rule == 'string') {\n      rules[i] = { include: rule };\n    } else if (rule[1] instanceof Array) {\n      rule[1] = rewrite\u039Eactions(rule[1]);\n    } else if (rule instanceof Array) {\n      rule.splice(1, 2, rewrite\u039Eactions(rule[1], rule[2]));\n    }\n    i++;\n  }\n}\n\nconst grammar = {\n  defaultToken: 'invalid',\n  ignoreCase: false,\n  tokenPostfix: '',\n  brackets: [\n    { open: '{', close: '}', token: 'bracket.curly' },\n    { open: '[', close: ']', token: 'bracket.square' },\n    { open: '(', close: ')', token: 'bracket.parenthesis' },\n  ],\n  keywords: [\n    'def',\n    'and',\n    'or',\n    'is',\n    'isnt',\n    'not',\n    'on',\n    'yes',\n    '@',\n    'no',\n    'off',\n    'true',\n    'false',\n    'null',\n    'this',\n    'self',\n    'as',\n    'new',\n    'delete',\n    'typeof',\n    'in',\n    'instanceof',\n    'return',\n    'throw',\n    'break',\n    'continue',\n    'debugger',\n    'if',\n    'elif',\n    'else',\n    'switch',\n    'for',\n    'while',\n    'do',\n    'try',\n    'catch',\n    'finally',\n    'class',\n    'extends',\n    'super',\n    'undefined',\n    'then',\n    'unless',\n    'until',\n    'loop',\n    'of',\n    'by',\n    'when',\n    'tag',\n    'prop',\n    'attr',\n    'export',\n    'import',\n    'extend',\n    'var',\n    'let',\n    'const',\n    'require',\n    'isa',\n    'await',\n  ],\n  boolean: ['true', 'false', 'yes', 'no', 'undefined', 'null'],\n  operators: [\n    '=',\n    '!',\n    '~',\n    '?',\n    ':',\n    '!!',\n    '??',\n    '&',\n    '|',\n    '^',\n    '%',\n    '<<',\n    '!&',\n    '>>',\n    '>>>',\n    '+=',\n    '-=',\n    '*=',\n    '/=',\n    '&=',\n    '|=',\n    '?=',\n    '??=',\n    '^=',\n    '%=',\n    '~=',\n    '<<=',\n    '>>=',\n    '>>>=',\n    '..',\n    '...',\n    '||=',\n    `&&=`,\n    '**=',\n    '**',\n    '|=?',\n    '~=?',\n    '^=?',\n    '=?',\n    'and',\n    'or',\n  ],\n  assignments: [\n    '=',\n    '|=?',\n    '~=?',\n    '^=?',\n    '=?',\n    '^=',\n    '%=',\n    '~=',\n    '<<=',\n    '>>=',\n    '>>>=',\n    '||=',\n    `&&=`,\n    '?=',\n    '??=',\n    '+=',\n    '-=',\n    '*=',\n    '/=',\n    '&=',\n    '|=',\n    '**=',\n  ],\n  logic: ['>', '<', '==', '<=', '>=', '!=', '&&', '||', '===', '!=='],\n  ranges: ['..', '...'],\n  spread: ['...'],\n  dot: ['.'],\n  access: ['.', '..'],\n  math: ['+', '-', '*', '/', '++', '--'],\n\n  unspaced_ops: regexify('... . .. + * ++ --'),\n  comment: /#(\\s.*)?(\\n|$)/,\n  // we include these common regular expressions\n  symbols: /[=><!~?&%|+\\-*\\^,]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  postaccess: /(:(?=\\w))?/,\n  ivar: /\\@[a-zA-Z_]\\w*/,\n  B: /(?=\\s|$)/,\n  br: /[\\r\\n]+/,\n  constant: /[A-Z][\\w\\$]*(?:\\-+[\\w\\$]+)*/,\n  // subIdentifier: /(?:\\-*[\\w\\$]+)*/\n  // identifier: /[a-z_]@subIdentifier/\n  // anyIdentifier: /[A-Za-z_\\$][\\w\\$]*(?:\\-+[\\w\\$]+)*/\n  // anyIdentifierOpt: /(?:@anyIdentifier)?/\n  id: /[A-Za-z_\\$][\\w\\$]*(?:\\-+[\\w\\$]+)*\\??/,\n  plainid: /[A-Za-z_\\$][\\w\\$]*(?:\\-+[\\w\\$]+)*\\??/,\n  fieldid: /[\\@\\#]*@plainid/,\n  propid: /[\\@\\#]*@plainid/,\n  defid: /[\\@\\#]*@plainid/,\n  decid: /\\@@plainid/,\n  symid: /\\#+@plainid/,\n  symref: /\\#\\#@plainid/,\n  optid: /(?:@id)?/,\n  // (?:\\-+[\\w\\$]+)*\\??\n  esmIdentifier: /[A-Za-z_\\$\\@][\\w\\$]*(?:\\-+[\\w\\$]+)*\\??/,\n  propertyPath: /(?:[A-Za-z_\\$][A-Za-z\\d\\-\\_\\$]*\\.)?(?:[A-Za-z_\\$][A-Za-z\\d\\-\\_\\$]*)/,\n  tagNameIdentifier: /(?:[\\w\\-]+\\:)?\\w+(?:\\-\\w+)*/,\n  variable: /[\\w\\$]+(?:-[\\w\\$]*)*\\??/,\n  varKeyword: /var|let|const/,\n  tagIdentifier: /-*[a-zA-Z][\\w\\-]*/,\n  implicitCall: /(?!\\s(?:and|or|is|isa)\\s)(?=\\s[\\w\\'\\\"\\/\\[\\{])/, // not true for or etc\n  cssModifier: /(?:\\@+[\\<\\>\\!]?[\\w\\-]+\\+?|\\.+@id\\-?)/,\n  cssPropertyPath: /[\\@\\.]*[\\w\\-\\$]+(?:[\\@\\.]+[\\w\\-\\$]+)*/,\n  cssPropertyKey: /[\\@\\.]*[\\w\\-\\$]+(?:[\\@\\.]+[\\w\\-\\$]+)*(?:\\s*\\:)/,\n\n  cssVariable: /(?:--|\\$)[\\w\\-\\$]+/,\n  cssPropertyName: /[\\w\\-\\$]+/,\n  // cssModifier: /\\@[\\w\\-\\$]+/\n  cssPropertyKey2: /(?:@cssPropertyName(?:@cssModifier)*|@cssModifier+)(?:\\s*\\:)/,\n  cssUpModifier: /\\.\\.[\\w\\-\\$]+/,\n  cssIsModifier: /\\.[\\w\\-\\$]+/,\n\n  regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n  // The main tokenizer for our languages\n  tokenizer: states,\n};\n\nexport default {\n  tokens: grammar,\n\n  config: {\n    wordPattern:\n      /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n      blockComment: ['###', '###'],\n      lineComment: '#',\n    },\n    brackets: [\n      ['{', '}', 'delimiter.curly'],\n      ['[', ']', 'delimiter.square'],\n      ['(', ')', 'delimiter.parenthesis'],\n      ['<', '>', 'delimiter.angle'],\n    ],\n    autoClosingPairs: [\n      { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n      { open: \"'\", close: \"'\", notIn: ['string', 'comment'] },\n      { open: '{', close: '}', notIn: ['comment'] },\n      { open: '[', close: ']', notIn: ['string', 'comment'] },\n      { open: '(', close: ')', notIn: ['string', 'comment'] },\n      { open: '<', close: '>', notIn: ['string', 'comment', 'operators'] },\n    ],\n    onEnterRules: [\n      {\n        beforeText:\n          /^\\s*(?:def|get \\w|set \\w|class|for|if|elif|else|while|try|with|finally|except|async).*?$/,\n        action: { indentAction: 1 },\n      },\n      {\n        beforeText: /\\s*(?:do)\\s*(\\|.*\\|\\s*)?$/,\n        action: { indentAction: 1 },\n      },\n    ],\n  },\n};\n"],
  "mappings": "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AC,EAAGA,EAAK,CAAC,CAAC,CAAC,EAErDD,GACF,CACF,CAEA,IAAMG,EAAU,CACd,aAAc,UACd,WAAY,GACZ,aAAc,GACd,SAAU,CACR,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,eAAgB,EAChD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,gBAAiB,EACjD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,qBAAsB,CACxD,EACA,SAAU,CACR,MACA,MACA,KACA,KACA,OACA,MACA,KACA,MACA,IACA,KACA,MACA,OACA,QACA,OACA,OACA,OACA,KACA,MACA,SACA,SACA,KACA,aACA,SACA,QACA,QACA,WACA,WACA,KACA,OACA,OACA,SACA,MACA,QACA,KACA,MACA,QACA,UACA,QACA,UACA,QACA,YACA,OACA,SACA,QACA,OACA,KACA,KACA,OACA,MACA,OACA,OACA,SACA,SACA,SACA,MACA,MACA,QACA,UACA,MACA,OACF,EACA,QAAS,CAAC,OAAQ,QAAS,MAAO,KAAM,YAAa,MAAM,EAC3D,UAAW,CACT,IACA,IACA,IACA,IACA,IACA,KACA,KACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,KACA,KACA,KACA,MACA,MACA,OACA,KACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,KACA,MACA,IACF,EACA,YAAa,CACX,IACA,MACA,MACA,MACA,KACA,KACA,KACA,KACA,MACA,MACA,OACA,MACA,MACA,KACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACF,EACA,MAAO,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAAO,KAAK,EAClE,OAAQ,CAAC,KAAM,KAAK,EACpB,OAAQ,CAAC,KAAK,EACd,IAAK,CAAC,GAAG,EACT,OAAQ,CAAC,IAAK,IAAI,EAClB,KAAM,CAAC,IAAK,IAAK,IAAK,IAAK,KAAM,IAAI,EAErC,aAAcC,EAAS,oBAAoB,EAC3C,QAAS,iBAET,QAAS,sBACT,QAAS,yEACT,WAAY,aACZ,KAAM,iBACN,EAAG,WACH,GAAI,UACJ,SAAU,8BAKV,GAAI,uCACJ,QAAS,uCACT,QAAS,kBACT,OAAQ,kBACR,MAAO,kBACP,MAAO,aACP,MAAO,cACP,OAAQ,eACR,MAAO,WAEP,cAAe,yCACf,aAAc,sEACd,kBAAmB,8BACnB,SAAU,0BACV,WAAY,gBACZ,cAAe,oBACf,aAAc,gDACd,YAAa,uCACb,gBAAiB,wCACjB,eAAgB,iDAEhB,YAAa,qBACb,gBAAiB,YAEjB,gBAAiB,+DACjB,cAAe,gBACf,cAAe,cAEf,MAAO,qCACP,UAAW,yBACX,UAAW,+EAEX,UAAWR,CACb,EAEOS,EAAQ,CACb,OAAQF,EAER,OAAQ,CACN,YACE,wFACF,SAAU,CACR,aAAc,CAAC,MAAO,KAAK,EAC3B,YAAa,GACf,EACA,SAAU,CACR,CAAC,IAAK,IAAK,iBAAiB,EAC5B,CAAC,IAAK,IAAK,kBAAkB,EAC7B,CAAC,IAAK,IAAK,uBAAuB,EAClC,CAAC,IAAK,IAAK,iBAAiB,CAC9B,EACA,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,SAAS,CAAE,EACtD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,SAAS,CAAE,EACtD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAS,CAAE,EAC5C,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,SAAS,CAAE,EACtD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,SAAS,CAAE,EACtD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAW,WAAW,CAAE,CACrE,EACA,aAAc,CACZ,CACE,WACE,2FACF,OAAQ,CAAE,aAAc,CAAE,CAC5B,EACA,CACE,WAAY,4BACZ,OAAQ,CAAE,aAAc,CAAE,CAC5B,CACF,CACF,CACF",
  "names": ["iter$__", "a", "v", "eolpop", "repop", "toodeep", "regexify", "array", "pattern", "items", "_0", "_1", "item", "escaped", "denter", "indent", "outdent", "stay", "o", "v$\u03C6", "toodeep", "repop", "cases", "k", "v", "rule", "clones", "i\u03C6", "keys\u03C6", "l\u03C6", "clone", "states", "eolpop", "rewrite\u039Estate", "raw", "state", "rewrite\u039Etoken", "i\u03C62", "items\u03C6", "iter$__", "len\u03C6", "part", "orig", "rewrite\u039Eactions", "actions", "add", "o\u03C6", "i\u03C63", "keys\u03C62", "l\u03C62", "newkey", "result", "curr", "i", "items\u03C62", "len\u03C62", "action", "items\u03C63", "len\u03C63", "i\u03C64", "keys\u03C63", "states", "l\u03C63", "key", "rules", "i", "rule", "rewrite\u039Eactions", "grammar", "regexify", "monaco_lang_imba_default"]
}
